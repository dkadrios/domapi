<html><head><title>DomAPI Docs - Tutorial - Creating Components - Part 1</title><link rel="stylesheet" type="text/css" href="../docs/bin/style.css"></head><body><div id="logo"><a href="http://domapi.com"><img src="../docs/bin/logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="tutor_index.htm">Up to index</a><h3>DomAPI Tutorial</h3><div class="tutorNavBlock"><a href="tutor_27.htm"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="tutor_27.htm" title="Back">Working with Compression</a> &nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a> &nbsp;&nbsp;&nbsp; <a href="tutor_31.htm" title="Next">Working with Function Args</a><a href="tutor_31.htm"><img src="../docs/bin/right.gif" alt="Next" width="14" height="14" border="0"></a></div><h3>Creating Components - Part 1</h3><p class="tutorAuthor"> Author: <b>Darin Kadrioski</b><br /><span style="font-size:smaller">Modified: 06/21/2002</span></p><p style="font-size:14pt;font-weight:bold">NOTE! This tutorial is currently out of date and needs to be rewritten.</p><p> Components are the bread and butter of any API, and I knew when I started the DomAPI project that the component architecture would either make or break it.<br/> Here were the particulars floating around in my head at the time I was coming up with the specification: </p><ul><li>It had to reuse the existing <span class="inlinecode">Elm</span> object</li><li>The user wouldn''t have to create any HTML placeholders or link in external Style Sheets</li><li>It should be easy for the average developer to create their own components</li></ul><p> Let''s build a simple component to illuminate the creation process. This will be a simple button object, similar to the one found in the <span class="inlinecode">gui</span> directory. </p><h4>Part One - Creating a Basic Framework</h4><p> First we need to pick a name for our component. Pick a name that conveys what the purpose of the component is, and does not conflict with any existing JS or DOM objects. Component names should start with a capital letter, and use the "camel-case" styling if there are more than one word. We''ll call ours "<span class="inlinecode">MyButton</span>". </p><p> Once we have a name, we need to decide on the constructor. The standard constructor contains the following parameters: </p><pre class="code">function ComponentName(parent,theme,x,y,w,h){}</pre><p> The <span class="inlinecode">parent</span> and <span class="inlinecode">theme</span> parameters are required, however the rest are optional if not needed. For instance, a component that has a fixed size might leave off <span class="inlinecode">w</span> and <span class="inlinecode">h</span>.<br> For our button example, we''ll use the standard constructor, and add a parameter of our own, <span class="inlinecode">caption</span>, so the user can set the initial caption of the button: </p><pre class="code">function MyButton(parent,theme,x,y,w,h,caption){}</pre><p> Now that we have the outer frame work for our component, let''s flesh it out.<br><br> The first thing we want to do is create an <span class="inlinecode">Elm</span> to represent it. We''ll use <span class="inlinecode">createElm()</span> from <span class="inlinecode">core.js</span> to do this. This automatically ensures our component has the base functions (<span class="inlinecode">moveTo()</span>, <span class="inlinecode">hide()</span>, etc..) and also allows us to set the parent container of the component. We''ll simply pass it the params that the user passed us in the constructor. If any of these were null, <span class="inlinecode">createElm()</span> supplies default values. For instance, if <span class="inlinecode">parent</span> was passed as null, <span class="inlinecode">createElm()</span> uses the page body as the default. <br> We''ll store the result of createElm() in a local variable named <span class="inlinecode">elm</span> for futher use. The last line in our constructor will return this <span class="inlinecode">elm</span> back to the caller: </p><pre class="code">function MyButton(parent,theme,x,y,w,h,caption){
  var elm = createElm(parent,x,y,w,h);
  //------------------------
  return elm;
}</pre><p> This is nearly a complete, bare-bones component, except it is missing two things. First, every component must have a <span class="inlinecode">reDraw()</span> method. This method is responsible for applying the Theme to the component, and sizing and moving any child elements of the component. For our simple button, we will set the color, background-color, font and border properties based on the component''s <span class="inlinecode">Theme</span>. The constructor should also make a call to this <span class="inlinecode">reDraw()</span> method before exiting.<br> The second item missing involves a property of the Elm object named <span class="inlinecode">domAPIObjType</span>. This property identifies the component type. To the DOM, our component is simply a <span class="inlinecode">DIV</span>. The <span class="inlinecode">domAPIObjType</span> property helps us further identify it as being of type "MyButton". There are methods in <span class="inlinecode">core_c.js</span> that allow you to search up the DOM tree looking for particular types and that is where <span class="inlinecode">domAPIObjType</span> becomes helpful. By default, each Elm is simply of type "ELM". We''ll overwrite this with our own. The component''s type should be it''s constructor name in all caps, ie "MYBUTTON". <br><br> So here''s what we have so far, a fully functionally component. (that doesn''t do very much yet):<br><br><a href="components_e1.htm">[View as an Example Page]</a></p><h5>Listing 1. MyButton Constructor</h5><pre class="code">function MyButton(parent,theme,x,y,w,h,caption){
  var elm   = createElm(parent,x,y,w,h);
  elm.theme = theme?theme:defaultTheme;
  //------------------------
  elm.reDraw=function(){
    with(this.style){
      backgroundColor = this.theme.ctrlBgColor;
      color           = this.theme.ctrlFgColor;
      borderStyle     = this.theme.bdrOutset;
      borderWidth     = this.theme.bdrWidth;
      borderColor     = this.theme.bdrColor;
      font            = this.theme.font;
    }
  };
  //------------------------
  elm.reDraw();
  elm.domAPIObjType="MYBUTTON";
  return elm;
};</pre><p> In the next section, well add more functionallity to it. </p><div class="tutorNavBlock"><a href="tutor_27.htm"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="tutor_27.htm" title="Back">Working with Compression</a> &nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a> &nbsp;&nbsp;&nbsp; <a href="tutor_31.htm" title="Next">Working with Function Args</a><a href="tutor_31.htm"><img src="../docs/bin/right.gif" alt="Next" width="14" height="14" border="0"></a></div><hr />  </body></html>
