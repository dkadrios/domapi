<html><head><title>DomAPI Docs - Tutorial - Overview</title><link rel="stylesheet" type="text/css" href="../docs/bin/style.css"></head><body><div id="logo"><a href="http://domapi.com"><img src="../docs/bin/logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="tutor_index.htm">Up to index</a><h3>DomAPI Tutorial</h3><div class="tutorNavBlock"><a href="tutor_24.htm"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="tutor_24.htm" title="Back">Including other units</a> &nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a> &nbsp;&nbsp;&nbsp; <a href="tutor_33.htm" title="Next">Remote Procedure Calls (RPC)</a><a href="tutor_33.htm"><img src="../docs/bin/right.gif" alt="Next" width="14" height="14" border="0"></a></div><h3>Overview</h3><p class="tutorAuthor"> Author: <b>Darin Kadrioski</b><br /><span style="font-size:smaller">Modified: 09/15/2004</span></p><p>An Elm is an ordinary HTMLElement that has been given special properties and methods (referred to as "members") These members allow Elms to behave much more like traditional GUI elements. They allow Elms to be manipulated in an OOP manner that makes building DHTML GUIs a much more approachable task. Elms form the basis for all components in DomAPI, but they call also be created as stand-alone objects.</p><p>Any onscreen element can be converted to an Elm. Elms can also be created dynamically at runtime. Elms created at runtime can be added to the document, or they can exist in memory only. They are very flexible little critters.</p><h4>Introduction to domapi.Elm()</h4><p> The function <span class="inlinecode">domapi.Elm()</span> is used to both convert existing elements and to create new Elms. <span class="inlinecode">domapi.Elm()</span> takes a single parameter which is a Javascript Object, typically created in an inline fashion. (for more information on inline objects, see the Appendix entitled <a href="tutor_topic.cfm?id=31">"Working with Function Args"</a>). </p><p> Every property of the Object passed to <span class="inlinecode">domapi.Elm()</span> is optional, including the Object itself. The following table lists the properties that <span class="inlinecode">domapi.Elm()</span> will respond to including a brief description of each and what the default values will be if the property is omitted. The properties below are listed in alphabetical order. The actual ordering of the properties is not important in practice.<br /><br /><table border="1" cellspacing="0"><tr><th>Property</th><th>Default</th><th>Description</th></tr><tr><th>bgcolor</th><td>null</td><td>Background color to apply to the Elm. Only applies if <span class="inlinecode">skipStyle</span> is false.</td></tr><tr><th>color</th><td>null</td><td>Text color to apply to the Elm. Only applies if <span class="inlinecode">skipStyle</span> is false.</td></tr><tr><th>h</th><td>null</td><td>Height in pixels to assign to the Elm. Only applies if <span class="inlinecode">skipPosition</span> is false. If both <span class="inlinecode">w</span> and <span class="inlinecode">h</span> are not null, the Elm's <span class="inlinecode">style.overflow</span> is automatically set to "hidden".</td></tr><tr><th>id</th><td>null</td><td>If you pass the id of an existing page element, that element will be transformed into an Elm instead of creating a new one.</td></tr><tr><th>parent</th><td>document.body</td><td>Parent element to append the Elm to. Only applies if we are creating a new Elm and <span class="inlinecode">skipAdd</span> is false. If parent is null, the Elm is attached directly to the page body.</td></tr><tr><th>ref</th><td>null</td><td>If you pass a reference to an existing page element, that element will be transformed into an Elm instead of creating a new one.</td></tr><tr><th>skipAdd</th><td>false</td><td>If true and we are creating a new Elm, the Elm will not be added to the document. This can cut down on load times when building compound elements, or when you need to apply alot of styling to an Element before showing it onscreen. Use the <span class="inlinecode">appendChild()</span> DOM method to add the element to the page later if needed.</td></tr><tr><th>skipPosition</th><td>false</td><td>If true, the Elm will not be sized or positioned.</td></tr><tr><th>skipStyle</th><td>false</td><td>If true, the colors will not be applied to the Elm.</td></tr><tr><th>type</th><td>"DIV"</td><td>Type of elm to create. Only applies if we are creating a new Elm, not using an <span class="inlinecode">id</span> or <span class="inlinecode">ref</span>. Type can be any valid HTML element. Default is a "DIV".</td></tr><tr><th>w</th><td>null</td><td>Width in pixels to assign to the Elm. Only applies if <span class="inlinecode">skipPosition</span> is false. If both <span class="inlinecode">w</span> and <span class="inlinecode">h</span> are not null, the Elm's <span class="inlinecode">style.overflow</span> is automatically set to "hidden".</td></tr><tr><th>x</th><td>null</td><td>Left position in pixels to assign to the Elm. Only applies if <span class="inlinecode">skipPosition</span> is false. If both <span class="inlinecode">x</span> and <span class="inlinecode">y</span> are null the Elm is positioned relatively, otherwise it will be positioned absolutely.</td></tr><tr><th>y</th><td>null</td><td>Top position in pixels to assign to the Elm. Only applies if <span class="inlinecode">skipPosition</span> is false. If both <span class="inlinecode">x</span> and <span class="inlinecode">y</span> are null the Elm is positioned relatively, otherwise it will be positioned absolutely.</td></tr></table></p><h4>Creating New Elms</h4><p> Here are some examples of using domapi.Elm() to create brand new Elms: </p><pre class="code">var e1 = domapi.Elm();   // uses all defaults
var e2 = domapi.Elm({}); // same thing, uses all defaults
var e3 = domapi.Elm({parent:document.getElementById("main"),x:50,y:50,w:100,h:100});</pre><p> Here is an example of using delayed creation. We want a red DIV with white text that reads "hello world" to be positioned at 100, 100. We want the width and height to be automatic:</p><pre class="code">var e = domapi.Elm({
  x       : 100,
  y       : 100,
  color   : "white",
  bgcolor : "red",
  skipAdd : true
});
e.innerHTML = "hello world";
document.body.appendChild(e);</pre><p> Notice that you can break the Object out onto different lines to help make it more readable. Perfectly legal. </p><h4>Converting Existing Elements to Elms</h4><p> There are two ways you can convert an existing element to an Elm. One is to pass an id to <span class="inlinecode">domapi.Elm()</span>, the other is to pass a reference. Whichever you use is up to you and whatever is convenient at the time. If you already have a reference to an Element, then passing that is faster than passing the id, otherwise both are about the same.<br /> The following example shows many ways to convert an Element to an Elm. In this example, we assume we have a form element named "input1" that we want to be an Elm: </p><pre class="code">// passed by ref
var e = domapi.Elm({ref:document.forms[0].elements["input1"]});

// passed by id
var e = domapi.Elm({id:"input1"});

// passed by existing ref (same effect as pass by ref)
var e = document.forms[0].elements["form1"];
domapi.Elm({ref:e});</pre><div class="tutorNavBlock"><a href="tutor_24.htm"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="tutor_24.htm" title="Back">Including other units</a> &nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a> &nbsp;&nbsp;&nbsp; <a href="tutor_33.htm" title="Next">Remote Procedure Calls (RPC)</a><a href="tutor_33.htm"><img src="../docs/bin/right.gif" alt="Next" width="14" height="14" border="0"></a></div><hr />  </body></html>
