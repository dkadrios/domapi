<html><head><title>DomAPI Docs - Tutorial - Working with Compression</title><link rel="stylesheet" type="text/css" href="../docs/bin/style.css"></head><body><div id="logo"><a href="http://domapi.com"><img src="../docs/bin/logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="tutor_index.htm">Up to index</a><h3>DomAPI Tutorial</h3><div class="tutorNavBlock"><a href="tutor_30.htm"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="tutor_30.htm" title="Back">Working with Themes</a> &nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a> &nbsp;&nbsp;&nbsp; <a href="tutor_29.htm" title="Next">Creating Components - Part 1</a><a href="tutor_29.htm"><img src="../docs/bin/right.gif" alt="Next" width="14" height="14" border="0"></a></div><h3>Working with Compression</h3><p class="tutorAuthor"> Author: <b>Darin Kadrioski</b><br /><span style="font-size:smaller">Modified: 11/01/2004</span></p><p> Javascript is an interpreted language, not compiled, which means that the computer sees the code exactly as we have saved it, not as machine code. As humans, we format the code to make it easier for us to work with. We break it up onto separate lines, indent portions, and (hopefully) sprinkle comments thoughout.<br/> The computer doesn't care about all this extraneous stuff, in fact in addition to slowing down the interpreter, it fattens up the files and makes for longer downloads. </p><p> Enter Javascript compression. By running our human readable files through a processing technique, we can remove everything that the interpretor could care less about and present it with the entire script on one line of code. The result is that the files are up to 60% smaller and load up at runtime even faster. </p><p> Nebiru Software has a utility that you can use to compress any Javascript files. It's called <a href="http://nebiru.com/jscruncherpro"><img src="tutor_tinycrunch.gif" align="top" width="16" height="16" border="0" alt=""> JSCruncher Pro</a>. <p> Every <span class="inlineCode">*.js</span> file in the DomAPI has a corresponding <span class="inlineCode">*_c.js</span> file. These are the compressed versions that you should use in production.<br/> Use the regular <span class="inlineCode">*.js</span> files for development and debugging because they are human readable, but compress them before final deployment. Your page will download and start up much faster that way. </p><form><h5>Example - tutor_color.js - (uncompressed - 10.7 KB)</h5><p><textarea rows="10" cols="80" style="font-size:8pt">//------------------------------------------------------------------------------ // DomAPI color routines // D. Kadrioski 8/24/2001 // (c) Nebiru Software 2001-2002 //------------------------------------------------------------------------------ // Alpha Filter Routines // Robert Dankert 1/5/2002 // (c) Casper & Co Software 2001-2002 //------------------------------------------------------------------------------ // requires domapi.js //------------------------------------------------------------------------------ // this unit frequently converts colors from hex into RGB arrays and passes them // around. The go betweens are hexToRGB() and rgbToHex(). // rgbToHex() is located in domapi.js because Elm() needs it to deal with Mozilla // which surfaces all color properties as rgb(), not hex //------------------------------------------------------------------------------ // color object defined in corecolor.js domapi.color.lookupColors = "F0F8FF,FAEBD7,00FFFF,7FFFD4,F0FFFF,"+ "F5F5DC,FFE4C4,000000,FFEBCD,0000FF,"+ "8A2BE2,A52A2A,DEB887,5F9EA0,7FFF00,"+ "D2691E,FF7F50,6495ED,FFF8DC,DC143C,"+ "00FFFF,00008B,008B8B,B8860B,A9A9A9,"+ "006400,BDB76B,8B008B,556B2F,FF8C00,"+ "9932CC,8B0000,E9967A,8FBC8B,1E90FF,"+ "228B22,848484,008200,CD5C5C,E6E6FA,"+ "FFFACD,D3D3D3,20B2AA,00FF00,FF00FF,"+ "840000,7B68EE,000080,FFA500,FF0000,"+ "FA8072,C6C6C6,6A5ACD,008284,FFFF00,"+ "9ACD32,FFFFFF"; domapi.color.lookupColorNames = "aliceblue,antiquewhite,aqua,aquamarine,azure,"+ "beige,bisque,black,blanchedalmond,blue,"+ "blueviolet,brown,burlywood,cadetblue,chartreuse,"+ "chocolate,coral,cornflowerblue,cornsilk,crimson,"+ "cyan,darkblue,darkcyan,darkgoldenrod,darkgray,"+ "darkgreen,darkkhaki,darkmagenta,darkolivegreen,darkorange,"+ "darkorchid,darkred,darksalmon,darkseagreen,dodgerblue,"+ "forestgreen,gray,green,indianred,lavender,"+ "lemonchiffon,lightgrey,lightseagreen,lime,magenta,"+ "maroon,mediumslateblue,navy,orange,red,"+ "salmon,silver,slateblue,teal,yellow,"+ "yellowgreen,white"; domapi.color.lookupColors = domapi.color.lookupColors.split( ","); domapi.color.lookupColorNames = domapi.color.lookupColorNames.split(","); domapi.color.debug = false; //------------------------------------------------------------------------------ domapi.color.setColor = function(id,c,kind){ // quick and dirty painter function kind = domapi.rVal(kind,"bg"); c = domapi.rVal(c,"#FFFFFF"); switch(kind){ case "bg":domapi.getElm(id).style.backgroundColor = c; break; case "fg":domapi.getElm(id).style.color = c; break; } }; //------------------------------------------------------------------------------ domapi.color.hexToRGB = function(sent){ // takes in a hex color and returns an array of rgb values if(sent.charAt(0)!="#")sent = "#"+sent; return new Array( parseInt(sent.substring(1,3),16), parseInt(sent.substring(3,5),16), parseInt(sent.substring(5,7),16)); }; //------------------------------------------------------------------------------ domapi.color.alterColor = function(sent,percentage){ // given a hex color and a percentage, returns a brighter version. // Use negative values to darken var rgb = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(sent)); for(var i=0;i<rgb.length;i++){ if(rgb[i]==0 )rgb[i] = 1; rgb[i] = Math.floor(rgb[i])+Math.floor((rgb[i]*percentage)/100); if(rgb[i]>255)rgb[i] = 255; if(rgb[i]<0 )rgb[i] = 0; } return domapi.color.rgbToHex(rgb); }; //------------------------------------------------------------------------------ domapi.color.mergeColor = function(color1,color2,mergeMethod){ var a; var rgb1 = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(color1)); var rgb2 = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(color2)); switch(mergeMethod){ case "and": for(a=0;a<rgb1.length;a++)rgb1[a] = rgb1[a] & rgb2[a];break; case "or": for(a=0;a<rgb1.length;a++)rgb1[a] = rgb1[a] | rgb2[a];break; case "xor": for(a=0;a<rgb1.length;a++)rgb1[a] = rgb1[a] ^ rgb2[a];break; case "not": for(a=0;a<rgb1.length;a++)rgb1[a] = ~ rgb1[a];break; case "add": for(a=0;a<rgb1.length;a++)rgb1[a] = rgb1[a] + rgb2[a];break; case "subtract":for(a=0;a<rgb1.length;a++)rgb1[a] = rgb1[a] - rgb2[a];break; case "blend": for(a=0;a<rgb1.length;a++)rgb1[a] = Math.floor((rgb1[a] + rgb2[a])/2);break; case "floor": var avg = Math.floor((rgb1[0]+rgb1[1]+rgb1[2])/3); if(avg>128)for(a=0;a<rgb1.length;a++)rgb1[a] = 0; else for(a=0;a<rgb1.length;a++)rgb1[a] = 255; break; } for(a=0;a<rgb1.length;a++){if(rgb1[a]<0)rgb1[a] = 0;if(rgb1[a]>255)rgb1[a] = 255} return domapi.color.rgbToHex(rgb1); }; //------------------------------------------------------------------------------ domapi.elmProto.fadeToColor = function(kind,hexColor,inc,speed,fn){domapi.color.fadeToColor(this.id,kind,hexColor,inc,speed,fn)}; //------------------------------------------------------------------------------ domapi.color.fadeToColor = function (elmID,kind,hexColor,inc,speed,fn){ var a; if(domapi.color.debug)domapi.debug.dump_var("fadeToColor('"+elmID+"','"+kind+"','"+hexColor+"',"+inc+","+speed+",'"+fn+"')"); // moves closer to a final color until a match is made hexColor = domapi.rVal(hexColor,"#000000"); // assume fade to black kind = domapi.rVal(kind,"bg"); inc = domapi.rVal(inc,10); speed = domapi.rVal(speed,10); var elm = domapi.getElm(elmID); if(!elm)return; switch(kind){ case "bg": elm.fadeRGB1b = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(elm.style.backgroundColor)); elm.fadeRGB2b = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(hexColor)); // we need to correct for when system colors are used if(isNaN(elm.fadeRGB1b[0]))for(a=0;a<elm.fadeRGB1b.length;a++)elm.fadeRGB1b[a] = 255; if(isNaN(elm.fadeRGB2b[0]))for(a=0;a<elm.fadeRGB2b.length;a++)elm.fadeRGB2b[a] = 255; break; case "fg": elm.fadeRGB1f = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(elm.style.color)); elm.fadeRGB2f = domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(hexColor)); // we need to correct for when system colors are used if(isNaN(elm.fadeRGB1f[0]))for(a=0;a<elm.fadeRGB1f.length;a++)elm.fadeRGB1f[a] = 0; if(isNaN(elm.fadeRGB2f[0]))for(a=0;a<elm.fadeRGB2f.length;a++)elm.fadeRGB2f[a] = 0; break; default:return; // undefined kind } domapi.color._fadeToColorHelper(elmID,kind,inc,speed,fn); }; //------------------------------------------------------------------------------ domapi.color._fadeToColorHelper = function(elmID,kind,inc,speed,fn){ //if(domapi.color.debug)domapi.debug.dump_var("_fadeToColorHelper('"+elmID+"','"+kind+"','"+inc+"','"+speed+"','"+fn+"')"); var elm = domapi.getElm(elmID); var done = 0; // how many of rgb have reached dest color, quit when done==3 var delta,c1,c2,temp; switch(kind){ case "bg":var a1 = elm.fadeRGB1b; var a2 = elm.fadeRGB2b; break; case "fg":var a1 = elm.fadeRGB1f; var a2 = elm.fadeRGB2f; break; } if(domapi.color.debug)var db = " current="+a1+" target="+a2; for(var a=0;a<a1.length;a++){ c1 = a1[a]; c2 = a2[a]; delta = 0; if(c1!=c2){ temp = c2-c1; if(!isNaN(temp)){ delta = Math.floor((temp)*inc/100); c1 = parseInt(c1)+delta; }else delta=100; }; //domapi.debug.dump_var(delta) if(Math.abs(delta)<1){done++; c1 = c2} a1[a]=c1; } if(domapi.color.debug)domapi.debug.dump_var(db+" done="+done); switch(kind){ case "bg":elm.style.backgroundColor = domapi.color.rgbToHex(a1); break; case "fg":elm.style.color = domapi.color.rgbToHex(a1); break; } if(done!=3)setTimeout("domapi.color._fadeToColorHelper(\""+elmID+"\",\""+kind+"\","+inc+","+speed+",\""+fn+"\")",speed); else if(fn!="undefined")eval(fn); }; //------------------------------------------------------------------------------ domapi.elmProto.alphaTo=function(endA,glideType,steps,speed,fn){ if(this.isAlpha)return; domapi.rInt( endA,this.getAlpha()); // If no endA is set, default to no change in Alpha endA = Math.round(endA); domapi.rInt(steps, 50); // If no steps exist, default is for 50 domapi.rInt(speed, 20); // If no speed is defined, default is 20 domapi.rInt(glideType, 3); // Default is for slow-to-fast this.vSlideA = this.getAlpha(); // set vSlideA to the current alpha var distA = endA-this.vSlideA; // set distA to the alpha change total var scaleA = distA/((Math.pow(steps,2)+2*steps+1)/(4*steps)); // set the alpha-scaler component this.isAlpha = true; domapi.color._alphaDomElm(this.domAPIIndex,glideType,distA,scaleA,endA,steps,1,speed,fn); }; //------------------------------------------------------------------------------ domapi.color._alphaDomElm = function(elmIndex,type,distA,scaleA,endA,steps,count,speed,fn){ var elm=domapi.bags.elms[elmIndex]; // get the elm definition if(count<=steps) { // make sure the loop isnt completed switch(parseInt(type)){ case 1: elm.vSlideA+=scaleA*Math.pow(count/steps,3); break; case 2: elm.vSlideA+=scaleA*Math.pow(((steps-count)+1)/steps,3); if(Math.round(elm.vSlideA)==endA)count=steps; break; case 3: elm.vSlideA+=distA/steps; break; } elm.setAlpha(Math.round(elm.vSlideA)); // move to the new alpha count++; // Increase the count setTimeout("domapi.color._alphaDomElm(\""+elmIndex+"\","+type+","+distA+","+scaleA+","+endA+","+steps+","+count+","+speed+",\""+fn+"\")",speed); // Set the timeout for the next run }else{ elm.isAlpha=false; elm.setAlpha(endA); // Make sure it ends in proper spot if(fn!="undefined")eval(fn); // Evaluate whatever function you want evaluated } }; //------------------------------------------------------------------------------ </textarea></p><h5>Example - tutor_color_c.js - (compressed - 5.88 KB)</h5><p><textarea rows="10" cols="80" style="font-size:8pt">// Copyright 2002, Nebiru Software // www.domapi.com domapi.color.lookupColors="F0F8FF,FAEBD7,00FFFF,7FFFD4,F0FFFF,F5F5DC,FFE4C4,000000,FFEBCD,0000FF,8A2BE2,A52A2A,DEB887,5F9EA0,7FFF00,D2691E,FF7F50,6495ED,FFF8DC,DC143C,00FFFF,00008B,008B8B,B8860B,A9A9A9,006400,BDB76B,8B008B,556B2F,FF8C00,9932CC,8B0000,E9967A,8FBC8B,1E90FF,228B22,848484,008200,CD5C5C,E6E6FA,FFFACD,D3D3D3,20B2AA,00FF00,FF00FF,840000,7B68EE,000080,FFA500,FF0000,FA8072,C6C6C6,6A5ACD,008284,FFFF00,9ACD32,FFFFFF";domapi.color.lookupColorNames="aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,dodgerblue,forestgreen,gray,green,indianred,lavender,lemonchiffon,lightgrey,lightseagreen,lime,magenta,maroon,mediumslateblue,navy,orange,red,salmon,silver,slateblue,teal,yellow,yellowgreen,white";domapi.color.lookupColors=domapi.color.lookupColors.split(",");domapi.color.lookupColorNames=domapi.color.lookupColorNames.split(",");domapi.color.debug=false;domapi.color.setColor=function(id,c,kind){kind=domapi.rVal(kind,"bg");c=domapi.rVal(c,"#FFFFFF");switch(kind){case "bg":domapi.getElm(id).style.backgroundColor=c;break;case "fg":domapi.getElm(id).style.color=c;break}};domapi.color.hexToRGB=function(sent){if(sent.charAt(0)!="#")sent="#"+sent;return new Array(parseInt(sent.substring(1,3),16),parseInt(sent.substring(3,5),16),parseInt(sent.substring(5,7),16))};domapi.color.alterColor=function(sent,percentage){var rgb=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(sent));for(var i=0;i<rgb.length;i++){if(rgb[i]==0)rgb[i]=1;rgb[i]=Math.floor(rgb[i])+Math.floor((rgb[i]*percentage)/100);if(rgb[i]>255)rgb[i]=255;if(rgb[i]<0)rgb[i]=0}return domapi.color.rgbToHex(rgb)};domapi.color.mergeColor=function(color1,color2,mergeMethod){var a;var rgb1=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(color1));var rgb2=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(color2));switch(mergeMethod){case "and":for(a=0;a<rgb1.length;a++)rgb1[a]=rgb1[a]&rgb2[a];break;case "or":for(a=0;a<rgb1.length;a++)rgb1[a]=rgb1[a]|rgb2[a];break;case "xor":for(a=0;a<rgb1.length;a++)rgb1[a]=rgb1[a] ^ rgb2[a];break;case "not":for(a=0;a<rgb1.length;a++)rgb1[a]=~ rgb1[a];break;case "add":for(a=0;a<rgb1.length;a++)rgb1[a]=rgb1[a]+rgb2[a];break;case "subtract":for(a=0;a<rgb1.length;a++)rgb1[a]=rgb1[a]-rgb2[a];break;case "blend":for(a=0;a<rgb1.length;a++)rgb1[a]=Math.floor((rgb1[a]+rgb2[a])/2);break;case "floor":var avg=Math.floor((rgb1[0]+rgb1[1]+rgb1[2])/3);if(avg>128)for(a=0;a<rgb1.length;a++)rgb1[a]=0;else for(a=0;a<rgb1.length;a++)rgb1[a]=255;break}for(a=0;a<rgb1.length;a++){if(rgb1[a]<0)rgb1[a]=0;if(rgb1[a]>255)rgb1[a]=255}return domapi.color.rgbToHex(rgb1)};domapi.elmProto.fadeToColor=function(kind,hexColor,inc,speed,fn){domapi.color.fadeToColor(this.id,kind,hexColor,inc,speed,fn)};domapi.color.fadeToColor=function(elmID,kind,hexColor,inc,speed,fn){var a;if(domapi.color.debug)domapi.debug.dump_var("fadeToColor('"+elmID+"','"+kind+"','"+hexColor+"',"+inc+","+speed+",'"+fn+"')");hexColor=domapi.rVal(hexColor,"#000000");kind=domapi.rVal(kind,"bg");inc=domapi.rVal(inc,10);speed=domapi.rVal(speed,10);var elm=domapi.getElm(elmID);if(!elm)return;switch(kind){case "bg":elm.fadeRGB1b=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(elm.style.backgroundColor));elm.fadeRGB2b=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(hexColor));if(isNaN(elm.fadeRGB1b[0]))for(a=0;a<elm.fadeRGB1b.length;a++)elm.fadeRGB1b[a]=255;if(isNaN(elm.fadeRGB2b[0]))for(a=0;a<elm.fadeRGB2b.length;a++)elm.fadeRGB2b[a]=255;break;case "fg":elm.fadeRGB1f=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(elm.style.color));elm.fadeRGB2f=domapi.color.hexToRGB(domapi.color.makeSureIsHexColor(hexColor));if(isNaN(elm.fadeRGB1f[0]))for(a=0;a<elm.fadeRGB1f.length;a++)elm.fadeRGB1f[a]=0;if(isNaN(elm.fadeRGB2f[0]))for(a=0;a<elm.fadeRGB2f.length;a++)elm.fadeRGB2f[a]=0;break;default:return}domapi.color._fadeToColorHelper(elmID,kind,inc,speed,fn)};domapi.color._fadeToColorHelper=function(elmID,kind,inc,speed,fn){var elm=domapi.getElm(elmID);var done=0;var delta,c1,c2,temp;switch(kind){case "bg":var a1=elm.fadeRGB1b;var a2=elm.fadeRGB2b;break;case "fg":var a1=elm.fadeRGB1f;var a2=elm.fadeRGB2f;break}if(domapi.color.debug)var db=" current="+a1+" target="+a2;for(var a=0;a<a1.length;a++){c1=a1[a];c2=a2[a];delta=0;if(c1!=c2){temp=c2-c1;if(!isNaN(temp)){delta=Math.floor((temp)*inc/100);c1=parseInt(c1)+delta}else delta=100};if(Math.abs(delta)<1){done++;c1=c2}a1[a]=c1}if(domapi.color.debug)domapi.debug.dump_var(db+" done="+done);switch(kind){case "bg":elm.style.backgroundColor=domapi.color.rgbToHex(a1);break;case "fg":elm.style.color=domapi.color.rgbToHex(a1);break}if(done!=3)setTimeout("domapi.color._fadeToColorHelper(\""+elmID+"\",\""+kind+"\","+inc+","+speed+",\""+fn+"\")",speed);else if(fn!="undefined")eval(fn)};domapi.elmProto.alphaTo=function(endA,glideType,steps,speed,fn){if(this.isAlpha)return;domapi.rInt(endA,this.getAlpha());endA=Math.round(endA);domapi.rInt(steps,50);domapi.rInt(speed,20);domapi.rInt(glideType,3);this.vSlideA=this.getAlpha();var distA=endA-this.vSlideA;var scaleA=distA/((Math.pow(steps,2)+2*steps+1)/(4*steps));this.isAlpha=true;domapi.color._alphaDomElm(this.domAPIIndex,glideType,distA,scaleA,endA,steps,1,speed,fn)};domapi.color._alphaDomElm=function(elmIndex,type,distA,scaleA,endA,steps,count,speed,fn){var elm=domapi.bags.elms[elmIndex];if(count<=steps){switch(parseInt(type)){case 1:elm.vSlideA+=scaleA*Math.pow(count/steps,3);break;case 2:elm.vSlideA+=scaleA*Math.pow(((steps-count)+1)/steps,3);if(Math.round(elm.vSlideA)==endA)count=steps;break;case 3:elm.vSlideA+=distA/steps;break}elm.setAlpha(Math.round(elm.vSlideA));count++;setTimeout("domapi.color._alphaDomElm(\""+elmIndex+"\","+type+","+distA+","+scaleA+","+endA+","+steps+","+count+","+speed+",\""+fn+"\")",speed)}else{elm.isAlpha=false;elm.setAlpha(endA);if(fn!="undefined")eval(fn)}}; </textarea></p></form><p><span class="faqTitle">Some notes about compression</span> Before I started running my files through a compression routine, I used to make my JS files as small as possible by leaving out comments, removing semi-colons from lines, using arcane coding tricks and generally making my files impossible to read after the fact.<br/> My advice, don't do that!<br/> Since the file is going to be compressed, go ahead and code it the *right* way. Place lots of comments, and format the code so it's easy for you or someone else to read later.<br/><br/> Always remember to keep the original file in case you need to make changes to it later. And remember to always run the modified version back through the compressor before deploying it to your users. In the DomAPI, this is done using the <span class="inlineCode">*_c.js</span> files. For instance, if I want to modify the <a href="../color.cfm">color</a> routines, I'll edit the <span class="inlineCode">color.js</span> file. After I'm done making changes, I run <span class="inlineCode">color.js</span> through jscruncher.exe to create a <span class="inlineCode">color_c.js</span> file. The "c" stands for compressed. I never use the non-compressed file in any applications, it's just there for me to make future changes with. </p><hr /><p> For the compression routine to work, you must have semi-colons at the end of every line of code. If your page stops working after switching the js file over to a compressed version, you most likely forgot one. Remember that a semicolon is required before an <span class="inlineCode">else</span> statement in Javascript. </p><pre class="code">if(isTrue)
  doSomething(); // need a semicolon before an else statement
else
  doSomethingElse();</pre><p> Also note that if you are in the habit of creating and assigning new functions (as the components do quite a bit of) that is considered a line of code even though it ends with a curly brace. These need a semicolon as well. </p><pre class="code">this.doSomething=function(){doSomeStuff()}; // need a semicolon here</pre><br/><hr /><p> Compression lowers the amount of data your users need to download and makes your site move faster. Use the <span class="inlineCode">*_c.js</span> files whenever possible. </p><div class="tutorNavBlock"><a href="tutor_30.htm"><img src="../docs/bin/left.gif" alt="Back" width="14" height="14" border="0"></a><a href="tutor_30.htm" title="Back">Working with Themes</a> &nbsp;&nbsp;&nbsp; <a href="tutor_index.htm"><img src="../docs/bin/up.gif" alt="Up to index" width="14" height="14" border="0"></a> &nbsp;&nbsp;&nbsp; <a href="tutor_29.htm" title="Next">Creating Components - Part 1</a><a href="tutor_29.htm"><img src="../docs/bin/right.gif" alt="Next" width="14" height="14" border="0"></a></div><hr />  </body></html>
