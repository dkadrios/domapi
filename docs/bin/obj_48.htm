<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.Component</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.Component</h2> See also: <a href="obj_19.htm">Elm</a><br /><p> This object works as an interface layer between components and the base <a href="../bin/obj_19.htm">Elm</a><br /><br /> Every GUI component in DomAPI inherits all the properties of this class, as well as the elm class. </p><p> You never have to explicitly create an instance of the Component class, this is all taken care of by the author of the GUI control.<br /> For instance, the component class has a boolean property called <span class="inlinecode">doRollover</span> as you can see below. If you were to then create a <a href="../bin/obj_4.htm">Button</a><!-- Button --> instance on your page, it will have a <span class="inlinecode">doRollover</span> property as well, since it inherits it from this Component class.<br /><br /> A note about the "is" properties.<br /> Every component instance has an <span class="inlinecode">isComponent</span> boolean, that can be used when traversing the tree. Additionally, they have another "is" property based on their type. For instance, a Button instance has an <span class="inlinecode">isButton</span> boolean.<br /><br /> You can also use the <span class="inlinecode">DA_TYPE</span> property which will always be the component type in all caps, ie: <span class="inlinecode">BUTTON</span>.<br /><br /> Each component is also automatically given a CSS className based on its name. The format for the className is <span class="inlinecode">DA_</span> and then the name in all caps. For instance, <span class="inlinecode">DA_BUTTON</span>. </p><hr /><h3 style="margin-top:0px !important">Constructor Parameters unique to domapi.Component</h3><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr><tr><td class="nm">elementName</td><td>String</td><td>&nbsp;</td><td> Shortcut for 'attachToForm' behaviour. You can provide <span class="inlinecode">formName</span> and <span class="inlinecode">elementName</span> directly in the constructor to have the component behave as a form element. </td></tr><tr><td class="nm">formName</td><td>String</td><td>&nbsp;</td><td> Shortcut for 'attachToForm' behaviour. You can provide <span class="inlinecode">formName</span> and <span class="inlinecode">elementName</span> directly in the constructor to have the component behave as a form element. </td></tr></table><span style="margin-left:20px;font-size:smaller"> You can also use <a href="obj_19.htm">Elm</a> constructor parameters when creating a <span class="inlinecode">domapi.Component</span> instance. </span><hr /><a name="contents">&nbsp;</a><h4>Events unique to domapi.Component</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#1151">onchange</a></li><li><a href="#853">ondraw</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1063">onlayout</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Component also has the same events as <a href="obj_19.htm">Elm</a>.</span></td></tr></table><h4>Methods unique to domapi.Component</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#1141">attachToForm</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1137">beginUpdate</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#660">draw</a></li><li><a href="#1138">endUpdate</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1140">getValue</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1062">layout</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1128">loadFromJSON</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1127">saveToJSON</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1075">setEnabled</a></li><li><a href="#1139">setValue</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Component also has the same methods as <a href="obj_19.htm">Elm</a>.</span></td></tr></table><h4>Properties unique to domapi.Component</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#233">DA_TYPE</a></li><li><a href="#1125">doBGFill</a></li><li><a href="#1123">doBorder</a></li><li><a href="#1124">doDepress</a></li><li><a href="#1122">doRollover</a></li><li><a href="#1126">doRolloverFill</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#859">enabled</a></li><li><a href="#1065">isComponent</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Component also has the same properties as <a href="obj_19.htm">Elm</a>.</span></td></tr></table><hr /><div class="prop_group_title">Events</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1151">onchange ()</a></th></tr></table><p> Fires whenever the component's value changes. </p><h5>Example:</h5><pre class="code">
comp1.onchange = function(){
  alert("new value = " + this.value);
};</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="853">ondraw ()</a></th></tr></table><p> This event fires immediately after the component has executed it's internal <span class=inlinecode>draw()</span> method. That method is responsible for displaying the component in the current theme.<br /> You can use the <span class=inlinecode>ondraw</span> event to add in your own custom drawing code. </p><h5>Example:</h5><pre class="code">
// make the button's border blue
button1.ondraw = function(){
  this.style.borderColor = "blue";
}</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=48#660">draw</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1063">onlayout ()</a></th></tr></table><p> This event fires immediately after the component has executed it's internal <span class=inlinecode>layout()</span> method.<br /> You can use the <span class=inlinecode>onlayout</span> event to add in your own custom drawing code. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=48#1062">layout</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1141">attachToForm ( form, name )</a></th></tr></table><p> Causes the control to become an element of a given form. This allows the value of the control to participate in a GET or POST operation. </p><h5>Example:</h5><pre class="code">
// value of combobox1 will be posted in the form as "productID"
combobox1.attachToForm(document.form1, "productID");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">form</td><td>Form</td><td class="opt">Y</td><td>&nbsp;</td><td> A reference to the form to attach the component to. &nbsp; </td></tr><tr><td class="nm">name</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The name to use when posting the form. This equates to the <span class="inlinecode">name</span> attribute used by standard HTML form elements. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1137">beginUpdate ()</a></th></tr></table><p> For components which require a number of method calls to populate, using <span class="inlinecode">beginUpdate()</span> and <span class="inlinecode">endUpdate()</span> can help improve performance by keeping the component from painting itself repeatedly. </p><h5>Example:</h5><pre class="code">
elm1.beginUpdate();
elm1.addDate( ... );
elm1.addDate( ... );
elm1.addDate( ... );
elm1.endUpdate();</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="660">draw ()</a></th></tr></table><p> The <span class=inlinecode>draw()</span> method forces the component to update itself using the current Theme. Typically you do not have to call <span class=inlinecode>draw()</span> yourself.<br /><br />
 Causes <a href="../bin/obj_48.htm#853">ondraw</a> to fire. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=48#1062">layout</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1138">endUpdate ()</a></th></tr></table><p> For components which require a number of method calls to populate, using <span class="inlinecode">beginUpdate()</span> and <span class="inlinecode">endUpdate()</span> can help improve performance by keeping the component from painting itself repeatedly. </p><h5>Example:</h5><pre class="code">
elm1.beginUpdate();
elm1.addDate( ... );
elm1.addDate( ... );
elm1.addDate( ... );
elm1.endUpdate();</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1140">getValue ( separator )</a></th><td>type : variant</td></tr></table><p> Use <span class="inlinecode">getValue()</span> to retrieve the component's <span class="inlinecode">value</span> property. Some components allow for multiple selections and such, so this method may return a delimited value. When that occurs, the value returned is cast as a String. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">separator</td><td>String</td><td class="opt">&nbsp;</td><td>\n&nbsp;</td><td> For components that can have more than one value, these are returned delimited by this parameter. Default is a line break. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1062">layout ()</a></th></tr></table><p> The <span class=inlinecode>layout()</span> method forces the component to update itself in relation to its size and layout any child elements it may have. Typically you do not have to call <span class=inlinecode>layout()</span> yourself. <br /><br /> Causes <a href="../bin/obj_48.htm#1063">onlayout</a> to fire. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=48#660">draw</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1128">loadFromJSON ( input )</a></th><td>type : String</td></tr></table><p> For components that support streaming to and from JSON strings. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">input</td><td>Object</td><td class="opt">Y</td><td>&nbsp;</td><td> The JSON object to load the component data from. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1127">saveToJSON ()</a></th></tr></table><p> For components that support streaming to and from JSON strings. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1075">setEnabled ( enabled )</a></th></tr></table><p> Most components implement the <span class="inlinecode">setEnabled()</span> method to toggle its <span class="inlinecode">enabled</span> property. Setting <span class="inlinecode">enabled</span> directly does not notify the component that the value has changed. Call <span class="inlinecode">setEnabled()</span> instead. </p><h5>Example:</h5><pre class="code">
button1.setEnabled(false); // disable button1</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">enabled</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=48#859">enabled</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1139">setValue ( value )</a></th></tr></table><p> &nbsp; </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Use this method to change the component's <span class="inlinecode">value</span> property. Never set <span class="inlinecode">value</span> directly. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="233">DA_TYPE</a></th><td>type : String</td></tr></table><p> Component type.<br /> Every component you create will have a unique component type string. This can be handy when traversing the DOM tree or when using the <span class=inlinecode>domapi.findTarget()</span> or <span class=inlinecode>domapi.findParent()</span> methods. </p><h5>Example:</h5><pre class="code">
// move up the tree till DA_TYPE "LISTBOX" is found
domapi.findTarget(Event, "LISTBOX");</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1125">doBGFill</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Whether or not the component fills in it's background color or leaves it transparent. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1123">doBorder</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Whether or not a border is drawn. Can be over ruled by skins. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1124">doDepress</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Affects the way some components react to mouse clicks. Usually used to enable a button-like effect. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1122">doRollover</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Some components do animations or change colors as you mouseover them. This property turns that on or off. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1126">doRolloverFill</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Some components that have mouseover effects also fill in the backgrounds. This can turn that off. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="859">enabled</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Boolean value that determines whether or not the component is enabled. Value is typically readonly, you should use the <span class="inlinecode">setEnabled()</span> method to set the actual value. <br /><br /> Actual implementaion depends on the component author. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=48#1075">setEnabled</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1065">isComponent</a></th><td>type : boolean</td></tr></table><p> Boolean value that tells whether or not the Elm is a Component. </p></div><a href="#contents">back to top</a><hr />  </body></html>
