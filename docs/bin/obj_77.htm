<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.rpc</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.rpc</h2><p> &nbsp; </p><p> DomAPI uses a form of <a href="http://ashleyit.com/rs/" target="_blank">remote-scripting</a> for achieving <b>remote procedure calls</b>. Remote-scripting was chosen as the protocol based on a number of factors including browser support, platform support and ease of use. </p><hr /><a name="contents">&nbsp;</a><h4>Events unique to domapi.rpc</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#983">onreceive</a></li><li><a href="#985">onsend</a></li><li><a href="#1100">ontimeout</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li></ul></td></tr></table><h4>Methods unique to domapi.rpc</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#987">receivePacket</a></li><li><a href="#986">sendPacket</a>&nbsp;<img src="improved.gif" alt="" width="50" height="14" border="0" align="absbottom" /></li><li><a href="#1101">setCursor</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li></ul></td></tr></table><h4>Properties unique to domapi.rpc</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#981">doDebug</a></li><li><a href="#1098">lastError</a></li><li><a href="#1099">lastUrl</a></li><li><a href="#1096">manageCursor</a></li><li><a href="#1097">timeout</a></li></ul></td></tr></table><hr /><div class="prop_group_title">Events</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="983">onreceive ( packet )</a></th></tr></table><p> This event fires after the engine receives a packet from the server. The packet received is passed as the single parameter.<br /> another way to deal with this event is to pass a "handler" function to <span class="inlinecode">sendPacket()</span>. Both are legitimate uses. You are free to use either method or both. </p><h5>Example:</h5><pre class="code">
domapi.rpc.onreceive = function(packet){
  alert("Received packet " + packet.guid);
};</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">packet</td><td>RPCPacket</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="985">onsend ( packet )</a></th></tr></table><p> This event fires when a packet is dispatched to the server. You can analyze the packet (which is passed as the only parameter) to determine what it contained. Each packet created has a unique <span class="inlinecode">guid</span>, which can be used to track it's progress through the engine via the <span class="inlinecode">onsend()</span> and <span class="inlinecode">onreceive()</span> events. </p><h5>Example:</h5><pre class="code">
domapi.rpc.onreceive = function(packet){
  if(packet.guid == "GUID_3")alert("Order data sent to server for processing");
};</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">packet</td><td>RPCPacket</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1100">ontimeout ( packet )</a></th></tr></table><p> Fires whenever a packet times out. Passes the packet in question to the handler if defined. </p><h5>Example:</h5><pre class="code">
domapi.rpc.ontimeout = myCustomTimeoutFunction;</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">packet</td><td>RPCPacket</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=77#1097">timeout</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="987">receivePacket ( packet )</a></th></tr></table><p> This method is called by the server code. You do not call it from your client code.<br /> If you would like to interact with the <span class="inlinecode">receivePacket()</span> method, see the <span class="inlinecode">onreceive()</span> event. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">packet</td><td>RPCPacket</td><td class="opt">Y</td><td>&nbsp;</td><td> Incoming packet &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="986">sendPacket( arg )</a></th><td>type : Object</td></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> This places the passed packet in the send queue. If no other packets were in the queue, it is dispatched immediately, otherwise packets are dispatched on a first-come-first-serve basis.<br /><span class="inlinecode">sendPacket()</span> also accepts an optional <span class="inlinecode">handler</span> function. This <span class="inlinecode">handler</span> will be fired when the sent packet returns from the server. The incoming packet is also passed to this handler. Handlers are matched to packets by the packet <span class="inlinecode">id</span> so it is very important that your server code pass the sent <span class="inlinecode">id</span> back in the response packet. </p><h5>Example:</h5><pre class="code">
var myPacket = new RPCPacket("newCust.cgi/add","Saving new customer");
myPacket.loadFromForm(document.custForm);
myPacket.data.add("cust_added",new Date());
domapi.rpc.sendPacket({
  packet    : myPacket,
  onreceive : custAdded  //custAdded called on success
});</pre><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">packet</td><td>RPCPacket</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">onreceive</td><td>Function</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Function call when response is received. The returned packet is passed to it. The <span class="inlinecode">domapi.rpc.onreceive </span>event is still fired. &nbsp; </td></tr><tr><td class="nm">timeout</td><td>integer</td><td class="opt">&nbsp;</td><td>core.rpc.timeout&nbsp;</td><td> Allows you to override the default timeout. &nbsp; </td></tr><tr><td class="nm">ontimeout</td><td>Function</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Allows you to provide a custom ontimeout handler. <span class="inlinecode">domapi.rpc.ontimeout </span>is still called. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=77#983">onreceive</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=77#985">onsend</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1101">setCursor ( busy )</a></th></tr></table><p> Manually changes the cursor. This method is called automatically if <span class="inlinecode">manageCursor</span> is <span class="inlinecode">true</span>. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">busy</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="981">doDebug</a></th><td>type : boolean</td><td>default value : false</td></tr></table><p> When <span class="inlinecode">true</span>, the engine will display urls it is about to use. It also will not hide the normally hidden <span class="inlinecode">IFRAME</span>.<br /> Note that this <span class="inlinecode">IFRAME</span> is not created until after the first call to <span class="inlinecode">sendPacket()</span>. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1098">lastError</a></th><td>type : String</td></tr></table><p> If an error is raised, this contains the last message. Useful for debugging. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1099">lastUrl</a></th><td>type : String</td></tr></table><p> useful for debugging, contains last request sent </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1096">manageCursor</a></th><td>type : boolean</td><td>default value : true</td></tr></table><p> Permits the engine to change the cursor to the "busy" icon when packets are in motion. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1097">timeout</a></th><td>type : integer</td><td>default value : 30000</td></tr></table><p> The default timeout for sent packets. Defaults to 30 seconds. You can override this for individual packets when sending them. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=77#1100">ontimeout</a></td></tr></table></div><a href="#contents">back to top</a><hr />  </body></html>
