<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.bags</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.bags</h2><p> &nbsp; </p><p><p> Every component type used on a page has a cooresponding <span class="inlinecode">bag</span> object. These bags can be thought of as collections or arrays and are useful for applying changes to all components of the same type.<br /> For instance, to set every Button's width to 80px you would use something like: </p><pre class="code">var buttons = domapi.bags.buttons;
for(var a=0;a&lt;buttons.length;a++)
   buttons[a].setW(80);</pre><p> Every <span class="inlinecode">bag</span> collection is the same name as it's component's constructor, in all lowercase. There will be a <span class="inlinecode">bag</span> available for each component you use on the page. For instance, if you've loaded the <span class="inlinecode">Tree</span> unit, there will then be a <span class="inlinecode">domapi.bags.tree</span> collection available. This is available right after the unit has loaded, you do not need to create a component first before it becomes available. In this way, you can tell if any Trees have been created by looking at the <span class="inlinecode">cdomapi.bags.tree.length</span> property and seeing it it's greater than zero.<br /></p><hr /><p> There is a special bag collection in DomAPI called <span class="inlinecode">domapi.bags.elms</span>. Every <span class="inlinecode">elm</span> that is created, whether by yourself or by a component, has a pointer in this collection. This can be useful for tricks. For instance, overuse of <span class="inlinecode">document.getElementById()</span> can really slow your pages down, but if you need to pass a pointer to an <span class="inlinecode">elm</span> to a timer event (say for an animation) you really have no choice but to send it's id and then get a pointer to the elm in the timer event. This is because you can't actually pass pointers to timers, as the clear-text code used to fire the timer is out of scope.<br /> So a handy trick to use is to instead pass the elm's index in the collection instead of it's id, and then accessing it through <span class="inlinecode">domapi.bags.elms</span> instead of using <span class="inlinecode">document.getElementById()</span>. This can be up to <b>100 times faster at runtime</b>. You can obtain the elm's index in the collection using <span class="inlinecode">domapi.bags.elms.indexOf(this);</span>. </p><hr /><p> Generally speaking, you should treat all <span class="inlinecode">bags</span> as though they were read-only. </p></p><hr /><a name="contents">&nbsp;</a><h4>Properties unique to domapi.bags</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#351">elms</a></li></ul></td></tr></table><hr /><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="351">elms</a></th><td>type : Array</td></tr></table><p> A pointer to each and every Elm created on a page is stored here. Some components are made up of many child Elms. Each of these are stored here as well. </p><h5>Example:</h5><pre class="code">
// set all elms red
for(var a=0;a&lt;domapi.bags.elms.length;a++)
  domapi.bags.elms[a].style.setBgColor("red");</pre></div><a href="#contents">back to top</a><hr />  </body></html>
