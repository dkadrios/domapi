<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.Tree</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.Tree</h2> See also: <a href="obj_19.htm">Elm</a><br /> See also: <a href="obj_48.htm">Component</a><br /><p> Standard tree control. All images are managed automatically by the theme engine but you can also provide your own for each node. </p><p> The nodes in the tree are simple <span class="inlinecode">HTMLElements</span> and not <span class="inlinecode">Elms</span>. They themselves have no methods attached to them. Instead, all the methods to manipulate them are stored at the tree level. This helps reduce memory usage and increase performance. <br /><br /> The tree component uses a "virtual" model where nodes are not physically created until they are actually made visible. This dramatically speeds up load time. You still add all your nodes at the outset, but the tree will only render them when needed.<br /><br /> Here is an example of how to create a <span class="inlineCode">Tree</span>. In this example, we build a directory structure two levels deep, and add a "file" which alerts the user when selected. This could just as easily load another frame with the file contents, or perform some other sort of JavaScript.<br/><br/><pre class="code">&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Tree Example&lt;/title&gt;
  &lt;script src="../src/domapi_c.js"&gt;&lt;/script&gt;
  &lt;script&gt;
    domapi.loadUnit("tree");
    onload = function(){
      tree1 = domapi.Tree({x:50,y:30,w:170,h:225});
      var firstNode  = tree1.addNode({caption:"Folder 1"});
      var secondNode = tree1.addNode({caption:"Folder 2",parent:firstNode});
      tree1.addNode({caption:"File 1",parent:secondNode,fn:"alert('You selected me')"});
      tree1.init(); // render top level nodes
    };
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre><br /> When you select the "file" node, the code we attached to the <span class="inlineCode">fn</span> parameter fires, which simply displays, 'You selected me'. This demonstrates one way to fire custom code when a node is selected. We can also attach an <a href="../bin/obj_42.htm#851">onchange</a><!-- Tree.onchange --> event to the tree itself, which fires whenever any node is selected. The tree stores a <a href="../bin/obj_42.htm#338">selected</a><!-- Tree.selected --> property which contains the current node.<br /><br /> Many methods of the Tree accept or return a <span class="inlinecode">Treenode</span>. This refers to one of the nodes in the tree. A <span class="inlinecode">Treenode</span> might not be an <span class="inlinecode">HTMLElement</span>. Until a node is rendered, it exists only in memory. Nodes are accessed through the Tree's <a href="../bin/obj_42.htm#337">nodes</a><!-- Tree.nodes -->array, the <a href="../bin/obj_42.htm#338">selected</a><!-- Tree.selected -->property, or by any of the methods that return a node, such as <a href="../bin/obj_42.htm#1426">getParentNode</a><!-- Tree.getParentNode -->. Each Treenode has its own <span class="inlinecode">nodes</span> array, which contains all of its children. Treenodes also have <span class="inlinecode">enabled</span>, <span class="inlinecode">rendered</span>, <span class="inlinecode">selected</span> and <span class="inlinecode">canSelect</span> boolean properties. </p><hr /><h3 style="margin-top:0px !important">Constructor Parameters unique to domapi.Tree</h3><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr><tr><td class="nm">delimiter</td><td>String</td><td>/&nbsp;</td><td> Used when creating or parsing paths. This character is used to delimit each node or level in the path. </td></tr><tr><td class="nm">doDblClickFolderExpands</td><td>boolean</td><td>false&nbsp;</td><td> Double-clicking on a folder will expand the node. </td></tr><tr><td class="nm">doDblClickTextExpands</td><td>boolean</td><td>true&nbsp;</td><td> Double-clicking the text of a node will expand it. </td></tr><tr><td class="nm">doFolderExpands</td><td>boolean</td><td>true&nbsp;</td><td> Clicking on a folder will expand a node. </td></tr><tr><td class="nm">doFolderSelects</td><td>boolean</td><td>true&nbsp;</td><td> Clicking on a folder will select the node. </td></tr><tr><td class="nm">doShowLines</td><td>boolean</td><td>false&nbsp;</td><td> Whether or not to render lines connecting all the nodes to their parents and siblings.<br /> Has no affect on performance - purely a visual preference. </td></tr><tr><td class="nm">doTextExpands</td><td>boolean</td><td>false&nbsp;</td><td> Clicking on the text of a node will expand it. </td></tr></table><span style="margin-left:20px;font-size:smaller"> You can also use <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a> constructor parameters when creating a <span class="inlinecode">domapi.Tree</span> instance. </span><hr /><a name="contents">&nbsp;</a><h4>Events unique to domapi.Tree</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#851">onchange</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Tree also has the same events as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><h4>Methods unique to domapi.Tree</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#763">addNode</a></li><li><a href="#824">addPath</a></li><li><a href="#1424">childCount</a></li><li><a href="#1458">clear</a></li><li><a href="#1435">collapseAll</a></li><li><a href="#829">collapseNode</a></li><li><a href="#1418">deleteNode</a></li><li><a href="#1434">expandAll</a></li><li><a href="#830">expandNode</a></li><li><a href="#1433">expandPath</a></li><li><a href="#1429">getLastExpandedChild</a></li><li><a href="#1428">getNextSibling</a></li><li><a href="#1426">getParentNode</a></li><li><a href="#1419">getPath</a></li><li><a href="#1427">getPreviousSibling</a></li><li><a href="#1432">getText</a></li><li><a href="#1430">getTextCell</a></li><li><a href="#1425">hasChildren</a></li><li><a href="#832">init</a></li><li><a href="#1417">insertNode</a></li><li><a href="#1436">loadFromJson</a></li></td><td valign="top"><li><a href="#1437">loadFromJsonUrl</a></li><li><a href="#1460">nodeFromPath</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1422">nodeIsChild</a></li><li><a href="#1423">nodeIsChildOfNode</a></li><li><a href="#1421">nodeLevel</a></li><li><a href="#1420">pathExists</a></li><li><a href="#1416">refresh</a></li><li><a href="#836">selectNode</a></li><li><a href="#1431">setText</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Tree also has the same methods as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><h4>Properties unique to domapi.Tree</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#337">nodes</a></li><li><a href="#338">selected</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Tree also has the same properties as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><hr /><div class="prop_group_title">Events</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="851">onchange ()</a></th></tr></table><p> Fires after the user has selected a node. Refer to the <span class="inlineCode">selected</span> property to access the selected node. </p></div><a href="#contents">back to top</a><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="763">addNode( arg )</a></th><td>type : TreeNode</td></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> Adds a node to the tree.<br /><span class="inlinecode">text</span> can be plain-text or HTML. <span class="inlineCode">fn</span> is an optional string of JavaScript to execute upon selection. For instance, you can have a node load an <span class="inlineCode">IFRAME</span> when the user clicks on it, etc... <br /><br /> The <span class="inlinecode">folder</span> parameter is the index of the folder image to be used. See notes for more info. If <span class="inlinecode">folder</span> is omitted, the default folder image is used.<br /><br /> The <span class="inlineCode">addNode()</span> method returns a pointer to the new node. See the examples for more details. </p><h5>Example:</h5><pre class="code">
tree1.addNode({text:"node1", fn:"alert('hi there!')"});
tree1.nodes[2].addNode({text:"child node"});</pre><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">text</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The node caption &nbsp; </td></tr><tr><td class="nm">fn</td><td>variant</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Code to be executed when the node is selected. Can be either a function reference or a String to be evaled. &nbsp; </td></tr><tr><td class="nm">canSelect</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Whether or not the user can select this node. &nbsp; </td></tr><tr><td class="nm">parent</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> The node to attach this new node to. If not provided, the new node is assumed to be a root node of the Tree. &nbsp; </td></tr><tr><td class="nm">order</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> If not provided, the new node is placed as the last child in the parent. You can pass an index to have it placed in a different order. &nbsp; </td></tr><tr><td class="nm">img</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Src of the image to be shown with the node. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#824">addPath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="824">addPath( arg )</a></th><td>type : TreeNode</td></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> Used to add a full path of nodes at once. Each node along the path that doesn't exist is created. Returns a reference to the last node added. </p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">del</td><td>String</td><td class="opt">&nbsp;</td><td>this.delimiter&nbsp;</td><td> The delimiter used. Defaults to the delimiter of the Tree, which defaulted to '/' when created. &nbsp; </td></tr><tr><td class="nm">path</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The path to be added. For example: <span class="inlinecode">"node 1/node 2/level 3"</span> &nbsp; </td></tr><tr><td class="nm">parent</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>the Tree&nbsp;</td><td> The node to add the path to. Defaults to the Tree root. &nbsp; </td></tr><tr><td class="nm">fn</td><td>variant</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Code to execute when the node is selected. Can be either a function reference or a string to be evaled.<br /><br /> This parameter is only added to the last node in the path. &nbsp; </td></tr><tr><td class="nm">img</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> The image to be displayed for the node. <br /><br /> This parameter is only added to the last node in the path. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#763">addNode</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1419">getPath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1420">pathExists</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1433">expandPath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1424">childCount ( node )</a></th><td>type : integer</td></tr></table><p> Returns the number of immediate children of a given node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1458">clear ()</a></th></tr></table><p> Clears all nodes from the tree. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1418">deleteNode</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1435">collapseAll ( node )</a></th></tr></table><p> Collapses every path under the given node. If no node is specified, collapses the entire Tree. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#829">collapseNode</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1434">expandAll</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="829">collapseNode ( node )</a></th></tr></table><p> Collapses a given node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#830">expandNode</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1435">collapseAll</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1418">deleteNode ( node )</a></th><td>type : TreeNode</td></tr></table><p> Removes a node from the Tree. Returns a reference to the deleted node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1434">expandAll ( node )</a></th></tr></table><p> Expands every path under the given node. If the node is not specified, expands the whole Tree. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#830">expandNode</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1435">collapseAll</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="830">expandNode ( node )</a></th></tr></table><p> Expands a given node. Does nothing if the node is already expanded. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1434">expandAll</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1435">collapseAll</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1433">expandPath ( path, del )</a></th></tr></table><p> Attempts to follow a certain path through the Tree, expanding any nodes found in it. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">path</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">del</td><td>String</td><td class="opt">&nbsp;</td><td>this.delimiter&nbsp;</td><td> The delimiter used in the path. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1419">getPath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1420">pathExists</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1429">getLastExpandedChild ( node )</a></th><td>type : TreeNode</td></tr></table><p> Recursively looks at the last child of a node until it finds one that is not expanded. Used internally by the tree for walking paths. Has little other use. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1428">getNextSibling ( node )</a></th><td>type : TreeNode</td></tr></table><p> Returns the next sibling of a node, that is the node right below it at the same level. If there is nothing to return, it returns <span class="inlinecode">null</span>. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1427">getPreviousSibling</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1426">getParentNode ( node )</a></th><td>type : TreeNode</td></tr></table><p> Returns the parent of the specified node. If the node is in the root, returns the Tree. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1419">getPath ( node, del )</a></th><td>type : String</td></tr></table><p> Returns the full path of a specified node, all the way up from the root. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">del</td><td>String</td><td class="opt">&nbsp;</td><td>this.delimiter&nbsp;</td><td> The delimiter to place between each each node's caption. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1420">pathExists</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1433">expandPath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1427">getPreviousSibling ( node )</a></th><td>type : TreeNode</td></tr></table><p> Returns the previous sibling of a node, that is the node right above it at the same level. If there is nothing to return, it returns <span class="inlinecode">null</span>. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1428">getNextSibling</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1432">getText ( node )</a></th><td>type : String</td></tr></table><p> Returns the caption of a given node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1431">setText</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1430">getTextCell ( node )</a></th><td>type : HTMLElement</td></tr></table><p> Returns the container of the caption of a node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1432">getText</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1425">hasChildren ( node )</a></th><td>type : boolean</td></tr></table><p> Returns <span class="inlinecode">true</span> if the given node has children. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="832">init ( node )</a></th></tr></table><p> The method initializes any newly added nodes. It must be called when ever new nodes are added. It does not need to be called after *each* node is added, but can instead be called after an entire batch is added. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>the Tree&nbsp;</td><td> The node to initialize. Defaults to the Tree is not specified. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1417">insertNode( arg )</a></th></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> Used primarily for internal drag-n-drop operations. This function transfers a given node into another. The nodes can be in the same tree, or they can be in separate ones. </p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">fromNode</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> The node to be transferred. &nbsp; </td></tr><tr><td class="nm">toNode</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> The target node. Can also be a Tree, in which case the transferred node is placed in its root. &nbsp; </td></tr><tr><td class="nm">sourceTree</td><td>Tree</td><td class="opt">Y</td><td>&nbsp;</td><td> The Tree that you're transferring the node from. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#763">addNode</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1436">loadFromJson ( json, node )</a></th></tr></table><p> Loads the Tree from a JSON Object. See the 'tree - json' example for an example of the syntax used. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">json</td><td>Object</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> The root node to attach the json to. Uses the Tree if omitted. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1437">loadFromJsonUrl</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1437">loadFromJsonUrl ( json, node )</a></th></tr></table><p> Loads the Tree from a JSON string on a server. See the 'tree - json' example for an example of the syntax used. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">json</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The URL that will return the JSON string. &nbsp; </td></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> The root node to add the JSON to. Uses the Tree if omitted. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1436">loadFromJson</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1460">nodeFromPath( arg )</a></th><td>type : Object</td></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> Given a path string and an optional delimiter, this moethd will return a reference to the specified node or null if not found. </p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">path</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Path to the node. &nbsp; </td></tr><tr><td class="nm">delimiter</td><td>String</td><td class="opt">&nbsp;</td><td>/&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1422">nodeIsChild ( node )</a></th><td>type : boolean</td></tr></table><p> Returns <span class="inlinecode">true</span> if a given node is a child of the Tree </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1423">nodeIsChildOfNode</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1423">nodeIsChildOfNode ( node, parent )</a></th><td>type : boolean</td></tr></table><p> Returns <span class="inlinecode">true</span> if a given node is a child of another node. Does not need to be the immediate parent. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> The node to test. &nbsp; </td></tr><tr><td class="nm">parent</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> The node you want to know is the parent or not. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1422">nodeIsChild</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1421">nodeLevel ( node )</a></th><td>type : integer</td></tr></table><p> Returns the level of a given node. That is, how many levels deep in the Tree it is. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1420">pathExists ( path, del )</a></th><td>type : boolean</td></tr></table><p> Tests to see if a path exists in the Tree. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">path</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The path the search for. A path is a delimited string of node captions. &nbsp; </td></tr><tr><td class="nm">del</td><td>String</td><td class="opt">&nbsp;</td><td>this.delimiter&nbsp;</td><td> The delimiter used in the path. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#824">addPath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1419">getPath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=42#1433">expandPath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1416">refresh ( node, recurse )</a></th></tr></table><p> Causes the Tree to re-render all its images, or all the images of a specified node.<br /> You shouldn't ever need to call this, but it's there should you need it. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>Object</td><td class="opt">&nbsp;</td><td>self&nbsp;</td><td> The node to refresh. If null is passed or this argument is left blank, the root of the Tree is used instead. &nbsp; </td></tr><tr><td class="nm">recurse</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> If <span class="inlinecode">true</span>, ever child that appears under the refreshed node will be refreshed as well. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="836">selectNode ( node )</a></th></tr></table><p> Selects a given node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#338">selected</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1431">setText ( node, text )</a></th></tr></table><p> Changes the caption of a given node. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>TreeNode</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">text</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#1432">getText</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="337">nodes</a></th><td>type : Array</td></tr></table><p> Each node off the root can be accessed via this object. (each node has another <span class="inlineCode">nodes</span> property, and so on) </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="338">selected</a></th><td>type : TreeNode</td><td>default value : null</td></tr></table><p> Pointer to the currently selected node. Returns <span class="inlineCode">null</span> if none are selected. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=42#836">selectNode</a></td></tr></table></div><a href="#contents">back to top</a><hr />  </body></html>
