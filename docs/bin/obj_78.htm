<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.RPCPacket</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.RPCPacket</h2><p> &nbsp; </p><p> RPCPackets are used by the RPC engine for sending and receiving semi-syncronous <b>remote-script</b> calls.<br /> Please see <a href="../bin/obj_77.htm">rpc</a> for information pertaining to the usage of RPCPackets. </p><hr /><a name="contents">&nbsp;</a><h4>Methods unique to domapi.RPCPacket</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#980">loadFromForm</a></li></ul></td></tr></table><h4>Properties unique to domapi.RPCPacket</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#978">data</a></li><li><a href="#976">guid</a></li><li><a href="#1102">method</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#979">statusText</a></li><li><a href="#977">url</a></li></ul></td></tr></table><hr /><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="980">loadFromForm ()</a></th></tr></table><p> This is really just a shortcut for <span class="inlinecode">data.loadFromForm()</span>, because I'm lazy :P </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=78#978">data</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=72#1103">loadFromForm</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="978">data</a></th><td>type : List</td></tr></table><p> This is a <a href="../bin/obj_72.htm">List</a> object. It is a collection of <span class="inlinecode">name=value</span> pairs that are to be sent to the service. <span class="inlinecode">List</span> objects offer many methods for loading and managing <span class="inlinecode">name=value</span> pairs. The pairs can be loaded from URL paramenters, Form values, etc...<br /><br />See the <a href="../bin/obj_72.htm">List</a> object for more information. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=72">List</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="976">guid</a></th><td>type : String</td><td>default value : generated automatically</td></tr></table><p> The system automatically generates a unique <span class="inlinecode">guid</span> for each packet on a page. This is used to match up receipt handlers with incoming packets. You do not have to do anything special with guids on the client, but it is important that your server code returns it in it's responce packet. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1102">method</a></th><td>type : integer</td><td>default value : mtGet</td></tr></table><p> Transport type to use. Valid entries are:<ul><li><span class="inlinecode">mtGet</span></li><li><span class="inlinecode">mtPost</span></li></ul>Default is <span class="inlinecode">mtGet</span>. <br /><br /><span class="inlinecode">mtPost </span>can post the most data at once, but can add a new item to the browser's history list each time. <br /><span class="inlinecode">mtGet </span>does not have this problem but is limited to 2048 characters of data. (minus the actual url of course) <br /><br /> Neither method affects the response from the server, which has no practical size limit. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="979">statusText</a></th><td>type : String</td><td>default value : "Loading"</td></tr></table><p> This is an optional string of text that the service will show in the browser's statusbar while the packet is in transit. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="977">url</a></th><td>type : String</td></tr></table><p> This is the URL to the service that the packet is to be sent to. This service is expected to return a response to the RPC object. See <a href="../bin/obj_77.htm">rpc</a> for more information. </p></div><a href="#contents">back to top</a><hr />  </body></html>
