<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.Viewbar</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.Viewbar</h2> See also: <a href="obj_19.htm">Elm</a><br /> See also: <a href="obj_48.htm">Component</a><br /><p> Allows you to create collapsable groups of links or topics. </p><p> The Viewbar component can be thought of as a collection of expandable/collapsible listboxes.<br /> It has also been compared to the old Outlook bar from MSOffice&reg;.<br /><br /> It's a convenient way to store an applications command menu or sectional data. <br /><br /> The Viewbar has an array property named <a href="../bin/obj_44.htm#347">groups</a><!-- Viewbar.groups -->. This encapsultes each of the viewbar's groups. Use the <a href="../bin/obj_44.htm#1444">add</a><!-- Viewbar.add --> method to add new groups to the control. Each group has its own <a href="../bin/obj_44.htm#786">group.add</a><!-- Viewbar.group.add --> method, for adding individual items. You can access each item in a group using the <span class="inlinecode">groups[n].childNodes</span> array, such as <br /><span class="inlinecode">Viewbar1.groups[0].childNodes[0].innerText="boo"</span><br /> This would set the text of the first item of the first group in the control. Take care not to try to access an item that doesn't exist. You can use <span class="inlinecode">groups.length</span> and <span class="inlinecode">groups[n].childNodes.length</span> to determine how many items are in the list. (remember that the array starts with zero, not one!) <br /><br /> Example: <pre class="code">elm1.groups.add({text:"Group 1"});
elm1.groups.add({text:"Group 2"});

elm1.groups[0].add({text:"Item 1"});
elm1.groups[0].add({text:"Item 2"});
elm1.groups[0].add({text:"Item 3", fn:"alert()"});
elm1.groups[0].add({text:"Item 4", fn:"alert()"});

elm1.groups[1].add({text:"Item 1"});
elm1.groups[1].add({text:"Item 2"});
elm1.groups[1].add({text:"Item 3", fn:"alert()"});
elm1.groups[1].add({text:"Item 4", fn:"alert()"});</pre> In this example, two groups are added to the control after which, four items are added to each. The first two items in each group do not have any code attached to them. The third and forth execute a simple alert statement. This can be any javascript at all.<br /><br /> For example: <pre class="code">elm1.groups[0].add({text:"Contents",  fn:"top.frame1.document.location='url.htm'"});</pre> This would cause a frame named "frame1" to be loaded with "contents.htm" when the item was selected. <br /><br /> The component has a property named <a href="../bin/obj_44.htm#348">selected</a><!-- Viewbar.selected --> which is a reference to the currently selected item. There is also an Event named <a href="../bin/obj_44.htm#852">onchange</a><!-- Viewbar.onchange --> which fires when the user selects an item. You can overwrite this method to respond to the change Event.<br /></p><hr /><h3 style="margin-top:0px !important">Constructor Parameters unique to domapi.Viewbar</h3><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr><tr><td class="nm">doShowSelection</td><td>boolean</td><td>true&nbsp;</td><td> Whether or not to highlight the selected item. </td></tr><tr><td class="nm">exclusive</td><td>boolean</td><td>true&nbsp;</td><td> If true, only one menu section can be open at a time. </td></tr></table><span style="margin-left:20px;font-size:smaller"> You can also use <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a> constructor parameters when creating a <span class="inlinecode">domapi.Viewbar</span> instance. </span><hr /><a name="contents">&nbsp;</a><h4>Events unique to domapi.Viewbar</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#1439">onbeforechange</a></li><li><a href="#852">onchange</a></li><li><a href="#1440">ondrawitem</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Viewbar also has the same events as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><h4>Methods unique to domapi.Viewbar</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#1444">add</a></li><li><a href="#1442">deleteGroup</a></li><li><a href="#786">group.add</a></li><li><a href="#1446">group.collapse</a></li><li><a href="#1445">group.expand</a></li><li><a href="#1441">selectItem</a></li><li><a href="#1443">setExclusive</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Viewbar also has the same methods as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><h4>Properties unique to domapi.Viewbar</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#1447">group.isCollapsed</a></li><li><a href="#347">groups</a></li><li><a href="#348">selected</a></li><li><a href="#1438">selectedGroup</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Viewbar also has the same properties as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><hr /><div class="prop_group_title">Events</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1439">onbeforechange ( item )</a></th></tr></table><p> Fires just before the user selects a new item. You must return a boolean value, indicating whether or not the change is allowed. The item the user is trying to select is passed to this event. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">item</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Item the user is trying to select. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="852">onchange ()</a></th></tr></table><p> Fires after users has selected an item. Refer to the <a href="../bin/obj_44.htm#348">selected</a><!-- Viewbar.selected --> property to access this item. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1440">ondrawitem ( item )</a></th></tr></table><p> Fires after an item has been drawn. You can use this event to do any custom drawing. The item being drawn is passed ot the event. Inspect its <span class="inlinecode">isHeader</span> property to tell it it's a group header or an item. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">item</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> The item being drawn. It will have an <span class="inlinecode">isHeader</span> boolean property, to tell if it's a header or not. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1444">add( arg )</a></th><td>type : HTMLElement</td></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> Adds a new group to the control and returns a reference to it. The new group will have an <span class="inlinecode">add</span> method of its own, which is used to add items to it. (<a href="../bin/obj_44.htm#786">group.add</a><!-- Viewbar.groups.add -->) </p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">text</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The caption of the new group. &nbsp; </td></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Each group can be given a <span class="inlinecode">value</span>. This is for your own purposes and is not used in displaying the control. Defaults to <span class="inlinecode">text</span> if not provided. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1442">deleteGroup ( index )</a></th></tr></table><p> Removes a group from the control. Deletes all items in the group. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">index</td><td>integer</td><td class="opt">Y</td><td>&nbsp;</td><td> The index of the group in the <a href="../bin/obj_44.htm#347">groups</a><!-- groups --> array. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="786">group.add( arg )</a></th></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> Adds an item to the group. </p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">text</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> The caption of the new item. &nbsp; </td></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Each can have it's own user-defined value. Has no affect on the display. Defaults to <span class="inlinecode">text</span> if not provided. &nbsp; </td></tr><tr><td class="nm">onselect</td><td>Function</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Code to execute when the item is selected. Can either a function or a string to be evaled &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1446">group.collapse ()</a></th></tr></table><p> Collapses a group. </p><h5>Example:</h5><pre class="code">
viewbar1.groups[0].collapse();</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1445">group.expand ()</a></th></tr></table><p> Expands the group. </p><h5>Example:</h5><pre class="code">
viewbar1.groups[3].expand();</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1441">selectItem ( item )</a></th></tr></table><p> Selects a given item.<br /> If present, the <a href="../bin/obj_44.htm#1439">onbeforechange</a><!-- Viewbar.onbeforechange --> event will fire before the item is selected. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">item</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> The item to select. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1443">setExclusive ()</a></th></tr></table><p> Toggle the <span class="inlinecode">exclusive</span> boolean value. When <span class="inlinecode">exclusive</span> is <span class="inlinecode">true</span>, only one group can be opened at a time. If another group is opened, all others are closed first. </p></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1447">group.isCollapsed</a></th><td>type : boolean</td></tr></table><p> Whether or not the group is collapsed. </p><h5>Example:</h5><pre class="code">
alert(viewbar1.groups[2].isCollapsed);</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="347">groups</a></th><td>type : Array</td></tr></table><p> Each menu-group in the list is accessed via this object. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="348">selected</a></th><td>type : HTMLElement</td><td>default value : null</td></tr></table><p> Reference to the currently selected item. Returns <span class="inlinecode">null</span> if none are selected. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1438">selectedGroup</a></th><td>type : HTMLElement</td></tr></table><p> Reference to the currently selected group. This is the group that the currrently selected item resides in.<br /> Returns <span class="inlinecode">null</span> if there is no selection. </p></div><a href="#contents">back to top</a><hr />  </body></html>
