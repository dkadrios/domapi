<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi.Menubar</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi.Menubar</h2> See also: <a href="obj_19.htm">Elm</a><br /> See also: <a href="obj_48.htm">Component</a><br /><p> Modeled after a standard Windows&reg; top-level menubar. Supports infinite cascading submenus. </p><p> Each item that is added using <a href="../bin/obj_25.htm#749">addItem</a><!-- Menubar.addItem --> to the menubar has a childMenu attribute which is a <a href="../bin/obj_24.htm">Popupmenu</a>. <!-- Popupmenu --> They also each have their own <a href="../bin/obj_24.htm#746">addItem</a><!-- Popupmenu.addItem --> method for adding the individual items. For example, adding a 'File' top-level menu and then a 'Print' item to it: <pre class="code">menu1 = domapi.Menubar({});
menu1.addItem({text : "File"});
menu1.miFile.addItem({text : "Print", onselected : "window.print()"});</pre> See <a href="../bin/obj_24.htm">Popupmenu</a><!-- Popupmenu -->for more details on dealing with the popupmenus. </p><hr /><h3 style="margin-top:0px !important">Constructor Parameters unique to domapi.Menubar</h3><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr><tr><td class="nm">doImages</td><td>boolean</td><td>true&nbsp;</td><td> Whether or not to allow for images to be shown in the popupmenus. </td></tr><tr><td class="nm">doShadow</td><td>boolean</td><td>true&nbsp;</td><td> Whether or not to show drop-shadows around the popupmenus. </td></tr><tr><td class="nm">h</td><td>integer</td><td>20&nbsp;</td><td> &nbsp; </td></tr><tr><td class="nm">popupX</td><td>integer</td><td>0&nbsp;</td><td> The left-offset to apply to the popupmenus when shown. </td></tr><tr><td class="nm">popupY</td><td>integer</td><td>0&nbsp;</td><td> The top-offset to apply to the popupmenus when shown. </td></tr><tr><td class="nm">w</td><td>integer</td><td>N/A&nbsp;</td><td> Note, if you do not specify a width, the <span class="inlinecode">Menubar</span> automatically fill the width of its parent. </td></tr></table><span style="margin-left:20px;font-size:smaller"> You can also use <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a> constructor parameters when creating a <span class="inlinecode">domapi.Menubar</span> instance. </span><hr /><a name="contents">&nbsp;</a><h4>Methods unique to domapi.Menubar</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#749">addItem</a></li><li><a href="#1287">closeItems</a></li><li><a href="#1288">closeLastItem</a></li><li><a href="#1285">hideAllMenus</a></li><li><a href="#1291">loadFromJson</a></li><li><a href="#1286">openItem</a></li><li><a href="#1290">setEnabled</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Menubar also has the same methods as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><h4>Properties unique to domapi.Menubar</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#307">childNodes</a></li><li><a href="#308">isOpened</a></li><li><a href="#1289">openedItem</a></li></ul><span style="margin-left:40px;font-size:smaller"> domapi.Menubar also has the same properties as <a href="obj_19.htm">Elm</a> and <a href="obj_48.htm">Component</a>.</span></td></tr></table><hr /><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="749">addItem( arg )</a></th></tr></table><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> This add a top-level menu item and returns a pointer to it. To add sub-menu items to it, use it's <span class=inlinecode>addItem()</span> method.<br /><br /> If you give your menuitem a name, you can refer to it by dot-notation, as though it were a property of the menu. For example: <pre class="code">menu.addItem({name:item1});
alert(menu1.item1.visible);</pre> If you do not provide a name, one is created by prefixing "mi" to the text value and camel-casing it. For example: <pre class="code">menu.addItem({text:"My Favorites"});
alert(menu1.miMyFavorites.visible);</pre></p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">visible</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Whether or not the item should be hidden. &nbsp; </td></tr><tr><td class="nm">text</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> The caption to display for the menuitem. &nbsp; </td></tr><tr><td class="nm">name</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> You can give your menuitems names, that way you can refer to them using dot-notation. &nbsp; </td></tr><tr><td class="nm">enabled</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1287">closeItems ()</a></th></tr></table><p> Causes all items to close and hide their popupmenus. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1288">closeLastItem ()</a></th></tr></table><p> Causes the last opened item to close. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1285">hideAllMenus ()</a></th></tr></table><p> Hides any visible menus. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1291">loadFromJson ( json )</a></th></tr></table><p> Loads the menu from a JSON object. See the test pages for an example of the JSON format used. You can also load the Menubar from a JSON file or url by using [TODO] </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">json</td><td>Object</td><td class="opt">Y</td><td>&nbsp;</td><td> The JSON object. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1286">openItem ( item )</a></th></tr></table><p> Causes a specified menuitem to open and show its popupmenu. </p><h5>Example:</h5><pre class="code">
menu1.openItem(menu1.miFile);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">item</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Can be either an integer index or item reference. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1290">setEnabled ( item, enabled )</a></th></tr></table><p> Changes the <span class="inlinecode">enabled</span> status of a specified item. </p><h5>Example:</h5><pre class="code">
menu1.setEnabled(menu1.miHelp, false);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">item</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Can be either an index or item reference. &nbsp; </td></tr><tr><td class="nm">enabled</td><td>boolean</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="307">childNodes</a></th><td>type : Collection</td></tr></table><p> &nbsp; </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="308">isOpened</a></th><td>type : boolean</td><td>default value : false</td></tr></table><p> This is <span class=inlinecode>true</span> if a dropdown menu is showing. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1289">openedItem</a></th><td>type : HTMLElement</td></tr></table><p> A reference to the currently opened item. </p></div><a href="#contents">back to top</a><hr />  </body></html>
