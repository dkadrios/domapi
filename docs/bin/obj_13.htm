<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>DomAPI Docs - domapi</title><link rel="stylesheet" type="text/css" href="style.css"><meta http-equiv="expires" content="0"><meta http-equiv="cache-control" content="no-cache"></head><body><div id="logo"><a href="http://domapi.com"><img src="logo6.gif" alt="DomAPI Application Platform" border="0" /></a></div><a href="#" onclick="history.go(-1)"><img src="left.gif" alt="Back" width="14" height="14" border="0"></a><a href="#" onclick="history.go(-1)">Back</a>&nbsp;&nbsp;&nbsp; <a href="../index.htm"><img src="up.gif" alt="Up to index" width="14" height="14" border="0"></a><a href="../index.htm">Up to index</a><h2>domapi</h2><p><span class="inlinecode">domapi.js</span> is responsible for bringing the DomAPI engine online. It contains support for loading additional units as well as some global vars and constants. It also has the crucial browser-sniffing code used by the rest of the library. </p><p> domapi.js contains all the critical methods and properties that make the DomAPI what it is. Without it, none of the components could work. Most every page you create will need to include this file.<br /><br /> This is the only unit that needs to be included using a <span class=inlinecode>&lt;script&gt;</span> tag. For every other unit you need to include, you use the <span class=inlinecode>domapi.loadUnit()</span> function. </p><hr /><a name="contents">&nbsp;</a><h4>Methods unique to domapi</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#662">Array.prototype.deleteItem</a></li><li><a href="#1005">Array.prototype.deleteValue</a></li><li><a href="#663">Array.prototype.indexOf</a></li><li><a href="#1079">Array.prototype.insert</a></li><li><a href="#876">Array.prototype.pop</a></li><li><a href="#887">Array.prototype.push</a></li><li><a href="#1115">Array.prototype.swap</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1114">Component</a>&nbsp;<img src="improved.gif" alt="" width="50" height="14" border="0" align="absbottom" /></li><li><a href="#699">Elm</a>&nbsp;<img src="improved.gif" alt="" width="50" height="14" border="0" align="absbottom" /></li><li><a href="#1129">String.prototype.toMixedCase</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#661">addEvent</a></li><li><a href="#664">bodyElm</a></li><li><a href="#673">bodyHeight</a></li><li><a href="#674">bodyWidth</a></li><li><a href="#675">boxValuesIn</a></li><li><a href="#676">boxValuesOut</a></li><li><a href="#1459">copyObject</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1094">dump</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /> (in debug.js)</li><li><a href="#1089">dumpSource</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /> (in debug.js)</li><li><a href="#677">findParent</a></li><li><a href="#678">findTarget</a></li></td><td valign="top"><li><a href="#882">formatGetString</a></li><li><a href="#679">getElm</a></li><li><a href="#680">getNodeIndex</a></li><li><a href="#881">getString</a></li><li><a href="#681">getTarget</a></li><li><a href="#787">getTrueOffset</a></li><li><a href="#1090">getZRange</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1091">guid</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#682">insertElm</a></li><li><a href="#1186">isMouseOver</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#683">isNil</a></li><li><a href="#1194">loadLang</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1077">loadTheme</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#665">loadUnit</a></li><li><a href="#1093">mousePosition</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1095">nodeSort</a>&nbsp;<img src="improved.gif" alt="" width="50" height="14" border="0" align="absbottom" /> (in nodesort.js)</li><li><a href="#666">preventBubble</a></li><li><a href="#1085">rBool</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1197">rColor</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#684">rInt</a></li><li><a href="#685">rVal</a></li></td><td valign="top"><li><a href="#872">regHook</a></li><li><a href="#667">removeEvent</a></li><li><a href="#1116">scrollBarWidth</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1092">scrollLeft</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#686">scrollTop</a></li><li><a href="#885">textHeight</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#884">textWidth</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#992">transferElm</a></li><li><a href="#1083">unRegHook</a></li><li><a href="#668">unitLoaded</a></li><li><a href="#1078">unload</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li></ul></td></tr></table><h4>Properties unique to domapi</h4><table><tr><td valign="top"><ul style="margin-bottom:0px"><li><a href="#1059">browser</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#252">compressed</a></li><li><a href="#1056">imagePath</a></li><li><a href="#999">isGecko</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#242">isIE</a></li><li><a href="#1001">isIE5Mac</a></li><li><a href="#248">isIEMac</a></li><li><a href="#1000">isKHTML</a></li><li><a href="#249">isNS</a></li><li><a href="#250">isStrict</a></li><li><a href="#239">libPath</a></li><li><a href="#1076">loaded</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1060">major</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#1061">minor</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#251">needsBoxFix</a></li><li><a href="#1058">platform</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#334">theme</a>&nbsp;<img src="improved.gif" alt="" width="50" height="14" border="0" align="absbottom" /></li><li><a href="#1057">themePath</a>&nbsp;<img src="new.gif" alt="" width="25" height="14" border="0" align="absbottom" /></li><li><a href="#335">themes</a></li><li><a href="#1082">useElmHooks</a></li><li><a href="#240">version</a></li></ul></td></tr></table><hr /><div class="prop_group_title">Methods</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="662">Array.prototype.deleteItem ( index )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method extends the array Object to have an <span class="inlinecode">deleteItem()</span> method.<br /> This method removes the item at the selected index from the array. The array is assumed to be zero-based, that is, the first item is index number zero. </p><h5>Example:</h5><pre class="code">
myArray.deleteItem(6); // removes the 5th item (zero is the first item)</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">index</td><td>integer</td><td class="opt">Y</td><td>&nbsp;</td><td> Index of the item to delete &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1005">Array.prototype.deleteValue ( value )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method extends the array Object to have an <span class="inlinecode">deleteValue</span> method.<br /> This method removes all items in the array that have the specified value. Value can be any primitive type or Object, including elements. </p><h5>Example:</h5><pre class="code">
var myArray = ["dog", "cat", "bird"];

myArray.deleteValue("cat"); // removes the second item</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Value to delete from the array &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="663">Array.prototype.indexOf ( value )</a></th></tr></table><p> This method extends the array Object to have an <span class="inlinecode">indexOf()</span> method.<br /><span class="inlinecode">indexOf()</span> returns the zero-based index of a String value contained within the array. If a match is not found, it returns <span class="inlinecode">-1</span>.<br /> All arrays you create (when this unit is loaded) automatically have this method. You need not do anything special to install it. </p><h5>Example:</h5><pre class="code">
var myArray = ["cat", "dog"];
myArray.indexOf("dog");   // returns 1
myArray.indexOf("plane"); // returns -1</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Value to locate in the array &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1079">Array.prototype.insert ( index, value )</a></th></tr></table><p> Inserts a given value into the array at a given position. </p><h5>Example:</h5><pre class="code">
var myArray = ["a", "b", "d", "e"];
myArray.insert(2, "c");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">index</td><td>integer</td><td class="opt">Y</td><td>&nbsp;</td><td> Index to insert the new item at. &nbsp; </td></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Value to insert into the array. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="876">Array.prototype.pop ()</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method extends the array Object to have an <span class="inlinecode">pop</span> method.<br /> This method returns the last item in the array and decreases the array length by one. The array is assumed to be zero-based, that is, the first item is index number zero. </p><h5>Example:</h5><pre class="code">
var myArray = [];
myArray.push("test 1");
myArray.push("test 2");
alert(myArray.pop()); // displays "test 2"
alert(myArray.length); // displays "1"</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#887">Array.prototype.push</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="887">Array.prototype.push ( value )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method extends the array Object to have an <span class="inlinecode">push</span> method.<br /> This method increases the array length by one and add the given value to the end. </p><h5>Example:</h5><pre class="code">
var myArray = [];
myArray.push("test 1");
myArray.push("test 2");
alert(myArray.pop()); // displays "test 2"
alert(myArray.length); // displays "1"</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Item to push onto the array stack. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#876">Array.prototype.pop</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1115">Array.prototype.swap ( i, j )</a></th></tr></table><p> Gives all Arrays a swap() method. </p><h5>Example:</h5><pre class="code">
var myArray = ["cat", "dog"];
myArray.swap(0,1);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">i</td><td>integer</td><td class="opt">Y</td><td>&nbsp;</td><td> First item's index &nbsp; </td></tr><tr><td class="nm">j</td><td>integer</td><td class="opt">Y</td><td>&nbsp;</td><td> Second item's index. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1114">Component( arg )</a></th><td>type : Object</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("component");</span> before can be used!</p><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> The object returned by this function works as an interface layer between components and the base <a href="../bin/obj_19.htm">Elm</a><br /><br /> Every GUI component in DomAPI inherits all the properties of this class, as well as the elm class.<br /><br /> You never have to explicitly create an instance of the Component class, this is all taken care of by the author of the GUI control.<br /> For instance, the Component class has a boolean property called doRollover as you can see below. If you were to therefore create a <a href="../bin/obj_4.htm">Button</a> instance on your page, it would have a doRollover property as well, since it inherits it from the Component class. <br />
 <br />
This function returns a <a href="../bin/obj_48.htm">Component</a> object. See there for additional properties and methods. </p><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">doBGFill</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Boolean value that determines whether or not the component's background is transparent. <br /><br /> Actual implementaion depends on the component author. &nbsp; </td></tr><tr><td class="nm">doBorder</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Boolean value that determines whether or not the component's border is visible. <br /><br /> Actual implementaion depends on the component author. &nbsp; </td></tr><tr><td class="nm">doDepress</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Boolean value that determines whether or not the component's animates selections. <br /><br /> Actual implementaion depends on the component author. &nbsp; </td></tr><tr><td class="nm">doRollover</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Boolean value that determines whether or not the component's animates rollovers. <br /><br /> Actual implementaion depends on the component author. &nbsp; </td></tr><tr><td class="nm">doRolloverFill</td><td>boolean</td><td class="opt">&nbsp;</td><td>true&nbsp;</td><td> Boolean value that determines whether or not the component's fills backgrounds during a rollover. <br /><br /> Actual implementaion depends on the component author. &nbsp; </td></tr><tr><td class="nm">isComponent</td><td>boolean</td><td class="opt">Y</td><td>true&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="699">Elm( arg )</a></th><td>type : Object</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("elm");</span> before can be used!</p><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> This method is the heart of the API. It takes a single parameter which is an inline Object containing all it's constructor parameters.<br /> All Components call this method as well, so anything listed here also applies to Component constructors. <br /><br /> See the tutorial on the Elm Object for more detailed information on this method and the tutorial on using inline Objects. </p><h5>Example:</h5><pre class="code">
var e1 = domapi.Elm({x:100, y:100, bgcolor:"red"});
var e2 = domapi.Elm({parent:e1, type:"IFRAME", w:500, h:300});</pre><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">parent</td><td>HTMLElement</td><td class="opt">&nbsp;</td><td>body&nbsp;</td><td> Existing element you want this new Elm inserted into. Defaults to the document body. Must be a reference, not an id. Use <span class="inlinecode">document.getElementById(id)</span> or <span class="inlinecode">domapi.getElm(id)</span> to convert an id to a reference. &nbsp; </td></tr><tr><td class="nm">x</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Left position in pixels. <br />
 <br />
NOTE: If both <span class="inlinecode">x</span> and <span class="inlinecode">y</span> are omitted, the Elm is relatively positioned. If either or both are present, it's absolutely positioned. &nbsp; </td></tr><tr><td class="nm">y</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Top position in pixels. <br /><br /> NOTE: If both <span class="inlinecode">x</span> and <span class="inlinecode">y</span> are omitted, the Elm is relatively positioned. If either or both are present, it's absolutely positioned. &nbsp; </td></tr><tr><td class="nm">w</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Width in pixels. <br /><br /> NOTE: If both <span class="inlinecode">w</span> and <span class="inlinecode">h</span> are present, the Elm's overflow is set to "hidden". &nbsp; </td></tr><tr><td class="nm">h</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Height in pixels. <br /><br /> NOTE: If both <span class="inlinecode">w</span> and <span class="inlinecode">h</span> are present, the Elm's overflow is set to "hidden". &nbsp; </td></tr><tr><td class="nm">id</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Instead of creating a new Elm, will use the HTMLElement identified by this id. &nbsp; </td></tr><tr><td class="nm">ref</td><td>HTMLElement</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Instead of creating a new Elm, will use this HTMLElement instead. &nbsp; </td></tr><tr><td class="nm">type</td><td>String</td><td class="opt">&nbsp;</td><td>DIV&nbsp;</td><td> Type of element to create the Elm as. <br />
 <span class="inlinecode">DIV, SPAN, IFRAME, P</span> etc.... &nbsp; </td></tr><tr><td class="nm">color</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> initial foreground color (doesn't really apply to Components, just Elms) &nbsp; </td></tr><tr><td class="nm">bgcolor</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> initial background color (doesn't really apply to Components, just Elms) &nbsp; </td></tr><tr><td class="nm">skipAdd</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> Whether or not to insert the Elm into the document immediately. If set to <span class="inlinecode">true</span>, it is up to you to call the DOM method <span class="inlinecode">appendChild()</span> when and where you want it inserted. &nbsp; </td></tr><tr><td class="nm">skipStyle</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> Skips the code that applies initial styling. This can improve performance if not needed. Currently this only includes setting the fore and background colors. <br />
 <br />
NOTE: If <span class="inlinecode">ref</span> or <span class="inlinecode">id</span> were passed in the <span class="inlinecode">arg</span> param, <span class="inlinecode">skipStyle</span> defaults to <span class="inlinecode">true</span> instead. &nbsp; </td></tr><tr><td class="nm">skipPosition</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> Skips the code that applies initial positioning. This can improve performance if not needed. Currently this includes setting style <span class="inlinecode">left, top, width, height, overflow</span> and <span class="inlinecode">position</span>. <br /><br />
 NOTE: If <span class="inlinecode">ref</span> or <span class="inlinecode">id</span> were passed in the <span class="inlinecode">arg</span> param, <span class="inlinecode">skipPosition</span> defaults to <span class="inlinecode">true</span> instead. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1129">String.prototype.toMixedCase ()</a></th><td>type : String</td></tr></table><p> Extends the String class to include a method to convert the first character of every word to a capital letter. </p><h5>Example:</h5><pre class="code">
var s = "the quick brown fox";
s = s.toMixedCase();
// yeilds "The Quick Brown Fox"</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="661">addEvent ( target, type, fn, useCapture )</a></th></tr></table><p> Assigns a function to fire when a given Event occurs on an element. For example, to be able to respond to the browser's <span class="inlinecode">onresize</span> Event: <span class="inlinecode"><pre class="code">
domapi.addEvent(window,"resize", myResizeFunction, true);

function myResizeFunction(){
  alert('Browser was resized!');
  alert('New width='+domapi.bodyWidth());
};
</pre></span></p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">target</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Element to attach the event to &nbsp; </td></tr><tr><td class="nm">type</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Event type, minus the "on" prefix. Examples: "mouseup", "resize", "click", etc.... &nbsp; </td></tr><tr><td class="nm">fn</td><td>Function</td><td class="opt">Y</td><td>&nbsp;</td><td> The function that will be the event handler. &nbsp; </td></tr><tr><td class="nm">useCapture</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> Only used if the browser is Mozilla based. Cooresponds to the useCapture option of the DOM <span class="inlinecode">addEventListener()</span> method. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#667">removeEvent</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="664">bodyElm ()</a></th><td>type : HTMLElement</td></tr></table><p> Returns a pointer to the DOM representation of the page's <body> tag. </p><h5>Example:</h5><pre class="code">
domapi.bodyElm().style.color = "gray";</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="673">bodyHeight ()</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns the height of the page. </p><h5>Example:</h5><pre class="code">
elm1.setH( domapi.bodyHeight() - 20);</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#674">bodyWidth</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="674">bodyWidth ()</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns the width of the page. </p><h5>Example:</h5><pre class="code">
elm1.setW( domapi.bodyWidth() - 20);</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#673">bodyHeight</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="675">boxValuesIn ( top, right, bottom, left )</a></th><td>type : String</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> The first parameter of this function can be an array of up to four values. If so, it get's it's input from the array. If any are missing, it calculates them just like <span class="inlinecode">boxValuesOut()</span> does.<br> The return value of this function is in CSS format like such:<br><table><tr><td><span class="inlinecode">boxValuesIn(0,5,0,10)</span></td><td>---&gt; <span class="inlinecode">"0px 5px 0px 10px"</span></td></tr><tr><td><span class="inlinecode">boxValuesIn(0,5)</span></td><td>---&gt; <span class="inlinecode">"0px 5px 0px 5px"</span></td></tr><tr><td><span class="inlinecode">boxValuesIn(Array[5,10,0])</span></td><td>---&gt; <span class="inlinecode">"5px 10px 0px 10px"</span></td></tr></table><br /><br />
Many <a href="../bin/obj_19.htm">Elm</a> methods indirectly call boxValuesIn(). For instance, <span class="inlinecode">elm1.setB([2,4]);</span></p><h5>Example:</h5><pre class="code">
elm1.style.padding = domapi.boxValuesIn(5,10);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">top</td><td>integer</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">right</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">bottom</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">left</td><td>integer</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#676">boxValuesOut</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="676">boxValuesOut ( style, pre, post )</a></th><td>type : Array</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Used internally by <span class="inlinecode">elm</span> methods that deal with CSS box properties. The first parameter is a pointer to a style object.<br/>The second parameter is a box category such as "border", "padding" or "margin". The third is an optional postfix such as "width".<br /> The function always returns a 4 element array.<br /><br /> Many <a href="../bin/obj_19.htm">Elm</a> methods indirectly call boxValuesIn(). For instance, <span class="inlinecode">alert(elm1.getB()[2]);</span></p><h5>Example:</h5><pre class="code">
// example 1 - get array of padding values
var p = domapi.boxValuesOut(elm1.style, "padding");

// example 2 - get array of border widths
var p = domapi.boxValuesOut(elm1.style, "border", "Widths");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">style</td><td>Object</td><td class="opt">Y</td><td>&nbsp;</td><td> The style property of a given element. &nbsp; </td></tr><tr><td class="nm">pre</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Prepended by &nbsp; </td></tr><tr><td class="nm">post</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Postfixed by &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#675">boxValuesIn</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1459">copyObject ( obj )</a></th><td>type : variant</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Creates a copy of a provided Object and returns it. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">obj</td><td>Object</td><td class="opt">Y</td><td>&nbsp;</td><td> The object to make a copy of. &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1094">dump ( variable )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("debug");</span> before can be used!</p><p> Shortcut to <a href="../bin/obj_17.htm#688">dump_var</a></p><h5>Example:</h5><pre class="code">
domapi.dump(elm1.style.margin);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">variable</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1089">dumpSource ()</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("debug");</span> before can be used!</p><p> Shortcut to <a href="../bin/obj_17.htm#1088">dumpSource</a></p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="677">findParent ( node, kind )</a></th><td>type : HTMLElement</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method walks up the DOM tree starting from the Element passed until it either locates a particular node type or reaches the top. If it succeeds in locating a parent node of the specified type, it returns it, otherwise it returns <span class="inlinecode">null</span>.<br> The node type to search for can be either an HTMLElement name such as <span class="inlinecode">"TABLE"</span> or it can be a DomAPI node type such as <span class="inlinecode">"PAGECONTROL"</span></p><h5>Example:</h5><pre class="code">
domapi.findParent(elm1, "DIV"); // returns and parent DIV

domapi.findParent(item1, "LISTBOX"); // returns the Listbox parent of an item</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">node</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Node to find parent for &nbsp; </td></tr><tr><td class="nm">kind</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Can be either a <span class="inlinecode">nodeName </span>or a <span class="inlinecode">domAPIObjType</span> &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#678">findTarget</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="678">findTarget ( event, kind )</a></th><td>type : HTMLElement</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method is very similar to <span class="inlinecode">findParent()</span> except that it uses the target of the given event as it's starting point. </p><h5>Example:</h5><pre class="code">
elm1.onclick = function(E){
  myNode = domapi.findTarget(E,"DIV");
};</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">event</td><td>Event</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">kind</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> node type to find &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#677">findParent</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="882">formatGetString ( messageLookup, params )</a></th><td>type : String</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("lang");</span> before can be used!</p><p> Used by the <span class="inlinecode">lang.js</span> unit for multilingual messages. <br /><br /> Similar to <a href="../bin/obj_13.htm#881">getString</a> but also accepts a string of formating parameters for use with strings that have placeholders. See <a href="../bin/obj_39.htm#883">formatString</a> for information on formating parameters. </p><h5>Example:</h5><pre class="code">
alert(domapi.formatGetString("VAL_NUMBER", ["Zip Code"]));</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">messageLookup</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> One of the message indexes declared in <span class="inlinecode">lang.js</span>. &nbsp; </td></tr><tr><td class="nm">params</td><td>Array</td><td class="opt">Y</td><td>&nbsp;</td><td> parameters for formatString() &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=39#883">formatString</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="679">getElm ( id )</a></th><td>type : HTMLElement</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This is identical to typing <span class="inlinecode">document.getElementById("id")</span>, just more convenient. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">id</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="680">getNodeIndex ( element )</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> When you have a group of nodes that have the same parent (i.e. they are all siblings) this function will return the relative index of a single node. For example, if I had 10 <span class="inlinecode">&lt;LI&gt</span> tags in a <span class="inlinecode">&lt;UL&gt</span>, using this function on the 5th <span class="inlinecode">&lt;LI&gt</span> would return 4. (the first item is always zero) <br /></p><h5>Example:</h5><pre class="code">
// find element's index amongst its siblings
var i = domapi.getNodeIndex(domapi.getElm("itemID"));</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">element</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Element to find the index of &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="881">getString ( lookup )</a></th><td>type : String</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("lang");</span> before can be used!</p><p> Used to return a string constant from the multilingual engine. (<span class="inlinecode">lang.js</span>)<br /><br /> String constants are returned in the currently selected language. Overwrite <span class="inlinecode">domapi.lang.index</span> to change the current language. (defaults to english) </p><h5>Example:</h5><pre class="code">
domapi.getString("MONTHS"); // returns an array of month names</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">lookup</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> One of the constants defined in <span class="inlinecode">lang.js</span> &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="681">getTarget ( event )</a></th><td>type : HTMLElement</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns the target element of a given Event; </p><h5>Example:</h5><pre class="code">
onmouseover = function(E){
  var nodeInQuestion = domapi.findTarget(E);
};</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">event</td><td>Event</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="787">getTrueOffset ( element )</a></th><td>type : Array</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Recursivly walks up the parentage of a given element and sums up it's page offset. Returns a two element array [x,y] which contains offset in pixels. </p><h5>Example:</h5><pre class="code">
var A = domapi.getTrueOffset(elm1);
alert(A[0]); // x
alert(A[1]); // y</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">element</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1090">getZRange ( element )</a></th><td>type : Array</td></tr></table><p> returns a two element array containing the lowest and highest <span class="inlinecode">style.z-index</span> 's for the given element and all it's parents, right on up the tree. </p><h5>Example:</h5><pre class="code">
var myArray = domapi.getZRange(elm1);
alert("highest is " + myArray[1]);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">element</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1091">guid ()</a></th><td>type : String</td></tr></table><p> Generates a unique id. <br />
 <br />
Guids take the form of "GUID_1", "GUID_2", etc... </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="682">insertElm ( element, target, where )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> This method is essentially identical to calling Microsoft's <span class="inlinecode">insertAdjacentElement</span> DOM method, with the following exceptions: <ul><li>It works in Mozilla as well</li><li>It ensures that the element's <span class="inlinecode">style.position</span> is "static" first.</li></ul> This is the method you use when you want to add a component or elm into the page flow. For instance, to add a spinedit component into a <span class="inlinecode">&lt;td&gt;</span> with the <span class="inlinecode">id</span> "td1", you'd do the following:<br><span class="inlinecode">insertElm(spinedit1,getElm("td1"),"afterBegin");</span><br> Now the spinedit is no longer positioned absolutely, and will "flow" with the page. This is very useful for mingling components in with standard form elements.<br><br> The <span class="inlinecode">where</span> param is a string designating where in relation to the target to place the element. Valid entries are: <ul><li>beforeBegin</li><li>afterBegin</li><li>beforeEnd</li><li>afterEnd</li></ul> For instance, to move an image with <span class="inlinecode">id</span> "img1" to a place in the document just after a paragraph with <span class="inlinecode">id</span> "p1", you'd do the following:<br><span class="inlinecode">insertElm(getElm("img1"), getElm("td1"), "afterEnd");</span><br></p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">element</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> element to insert &nbsp; </td></tr><tr><td class="nm">target</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Element to receive the inserted element &nbsp; </td></tr><tr><td class="nm">where</td><td>String</td><td class="opt">&nbsp;</td><td>afterBegin&nbsp;</td><td> Where to insert the element into the target. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#992">transferElm</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1186">isMouseOver ( event, element )</a></th><td>type : boolean</td></tr></table><p> Provided an Event and a target element, this method returns true if the mouse was over that element during the event. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">event</td><td>Event</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">element</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="683">isNil ( value )</a></th><td>type : boolean</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns true if the sent item is either <span class="inlinecode">null</span> or of zero length. </p><h5>Example:</h5><pre class="code">
if(domapi.isNil(somevar)){
  // do something
}</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1194">loadLang ()</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("lang");</span> before can be used!</p><p> Loads a language (localization) file for use by the system. The default langauge file is English and is loaded automatically. You can change the language used by the system by calling <span class="inlinecode">domapi.loadLang()</span>. The language file also controls other system aspects such as date formatting and calendar holidays.<br /><br /> Check the <span class="inlinecode">src/lang</span> folder for available languages. </p><h5>Example:</h5><pre class="code">
domapi.loadLang("SPA"); // Spanish</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1077">loadTheme ( themeName )</a></th></tr></table><p> Only the system theme is loaded automatically. To use any other themes, use this method, preferably before you create any components. </p><h5>Example:</h5><pre class="code">
domapi.loadTheme("aqua");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">themeName</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Name of the theme to load. This is assumed to reside in the <a href="../bin/obj_13.htm#1057">themePath</a> which is <span class="inlinecode">src/themes/</span> by default. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#334">theme</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#335">themes</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1057">themePath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="665">loadUnit ( unitName )</a></th></tr></table><p> Includes a code unit on the page. <span class="inlinecode">name</span> is the unit's name with no path or extension.<br /> All unit names are lowercase.<br /> If a unit is included on a page more than once, all but the first call are ignored.<br /> Refer to the array <a href="../bin/obj_13.htm#668">unitLoaded</a> should you need to know which units have already been included on the page.<br /><br /> You can specify a relative path to the unit if it's not included in the source tree. When this is done, all paths are relative to the <span class="inlinecode">src</span> folder. For example: <span class="inlinecode">domapi.loadUnit("../../myFolder/myunit");</span><br /><br /> Note that file extensions are never used. They MUST be .js </p><h5>Example:</h5><pre class="code">
domapi.loadUnit("color");
domapi.loadUnit("pagecontrol");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">unitName</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#668">unitLoaded</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1093">mousePosition ()</a></th><td>type : Array</td></tr></table><p> Returns a two element array containing the current mouse location when an event was fired, such as onmousemove. </p><h5>Example:</h5><pre class="code">
elm1.onmousemove = function(E){
  var x = domapi.mousePosition(E)[0];
  var y = domapi.mousePosition(E)[1];
};</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1095">nodeSort( arg )</a></th><td>type : Object</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("nodesort");</span> before can be used!</p><p class="constructorNotice"> The "arg" parameter fed to this method is an inline Object. See below for accepted parameters.<br /><span>Any parameters not listed here that you add may also be attached to any returned Object.</span></p><p> This method will sort the siblings of a given HTMLElement. </p><h5>Example:</h5><pre class="code">
// sort the rows of a table based on the second column
var t = domapi.getElm("table1");
domapi.nodeSort({
  nodelist        : t.rows,
  collection      : "cells",
  collectionIndex : 1
});</pre><h5>Available "arg" Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">nodelist</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> The list you want sorted. For example pass a &lt;ul&gt; to have items sorted. &nbsp; </td></tr><tr><td class="nm">direction</td><td>integer</td><td class="opt">&nbsp;</td><td>sdAscending&nbsp;</td><td> Sort direction <br />
 <br />
 Valid entries are<ul><li><span class="inlinecode">sdAscending</span></li><li><span class="inlinecode">sdDescending</span></li></ul> &nbsp; </td></tr><tr><td class="nm">type</td><td>integer</td><td class="opt">&nbsp;</td><td>stAlpha&nbsp;</td><td> Type of date being sorted. Use <span class="inlinecode">stAlpha</span> for strings, <span class="inlinecode">stNumeric</span> for numbers. <br />
 <br />
Other sort types may be added later, or you can provide your own <span class="inlinecode">compare</span> function. &nbsp; </td></tr><tr><td class="nm">collection</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> A sub object to sort on. For example, if <span class="inlinecode">nodelist</span> was a colletion of &ltTR&gt;s, collection can be "<span class="inlinecode">cells</span>" to sort a particular column. &nbsp; </td></tr><tr><td class="nm">collectionIndex</td><td>integer</td><td class="opt">&nbsp;</td><td>0&nbsp;</td><td> If a <span class="inlinecode">collection</span> was specified, this is the index within it. For example, if <span class="inlinecode">nodelist </span>were the rows in a table and collection is "<span class="inlinecode">cells</span>", <span class="inlinecode">collectionIndex</span> would be the column index. &nbsp; </td></tr><tr><td class="nm">low</td><td>integer</td><td class="opt">&nbsp;</td><td>0&nbsp;</td><td> Index to start sorting from. For example, to skip the first item in the list, pass 1. &nbsp; </td></tr><tr><td class="nm">high</td><td>integer</td><td class="opt">&nbsp;</td><td>nodelist.length&nbsp;</td><td> Index to sort up to. <br />
Leave this parameter off to sort all the way to the end. &nbsp; </td></tr><tr><td class="nm">compare</td><td>Function</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> Custom compare method. You can provide your own compare method. The engine will pass this method two items from <span class="inlinecode">nodelist</span>. <br />
 You must return -1,0 or 1. <br />
 <br />
 -1 = first item is less then the second 0 = take no action 1 = second item is less than first &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="666">preventBubble ( event )</a></th></tr></table><p> Stops the given event from progating through the DOM tree. </p><h5>Example:</h5><pre class="code">
elm1.onclick = function(E){
  domapi.preventBubble(E);  // stop the event from traveling up the DOM
};</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">event</td><td>Event</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1085">rBool ( var, default )</a></th><td>type : boolean</td></tr></table><p> Ensures that a given property has a value and is boolean. If not, it returns the second parameter which is a bool, or false if none was provided. This function is invaluable when writing components or overloaded functions in which not all the parameters may have been passed. </p><h5>Example:</h5><pre class="code">
b = domapi.rBool(b);  // make sure b had a boolean value</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">var</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> variable to assert &nbsp; </td></tr><tr><td class="nm">default</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#684">rInt</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#685">rVal</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1197">rColor ( color )</a></th><td>type : String</td></tr></table><p> Asserts a 'color'. Always returns a hex string. </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">color</td><td>String</td><td class="opt">&nbsp;</td><td>#FFFFFF&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="684">rInt ( var, default )</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Ensures that a given property has a value and is an integer. If not, it returns the second parameter which is an integer, or zero if none was provided. This function is invaluable when writing components or overloaded functions in which not all the parameters may have been passed. </p><h5>Example:</h5><pre class="code">
x = domapi.rInt(x,10); // default to 10 if x is not defined</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">var</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Variable to assert &nbsp; </td></tr><tr><td class="nm">default</td><td>integer</td><td class="opt">&nbsp;</td><td>0&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#684">rInt</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1085">rBool</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="685">rVal ( var, default )</a></th><td>type : String</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Ensures that a given property has a value. If not, it returns the second parameter which is the default. This function is invaluable when writing components or overloaded functions in which not all the parameters may have been passed. </p><h5>Example:</h5><pre class="code">
name = domapi.rVal(name, "new item"); // default to new item if name is not defined</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">var</td><td>variant</td><td class="opt">Y</td><td>&nbsp;</td><td> Variable to assert &nbsp; </td></tr><tr><td class="nm">default</td><td>String</td><td class="opt">&nbsp;</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#684">rInt</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1085">rBool</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="872">regHook ( name, handler )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("elm");</span> before can be used!</p><p> All Elm methods can have event handlers attached to them. <br /> These handlers apply to all onscreen Elms. The actual target Elm is passed to the handler, as well as the complete argument list sent to the original method. <br /><br /> Hooks are turned off by default. To turn them on, set core.useElmHooks. <br /><br /></p><h5>Example:</h5><pre class="code">
// create handler function
function myMoveToEvent(elm,args){
  alert(elm.id);
};

// define the moveTo hook
domapi.regHook("moveTo", myMoveToEvent);

// any calls to moveTo on ANY elm will now call the handler
elm1.moveTo(10,10); // fired myMoveToEvent</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">name</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Name of the Elm method to hook into. For instance, "moveTo". &nbsp; </td></tr><tr><td class="nm">handler</td><td>Function</td><td class="opt">Y</td><td>&nbsp;</td><td> Event handler to fire when the named method is called. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1082">useElmHooks</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1083">unRegHook</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="667">removeEvent ( target, type, fn, useCapture )</a></th></tr></table><p> Removes an Event assigned by <span class="inlinecode">addEvent()</span>. <br /><br /> You must provide <b>exactly</b> the same parameters you used when calling <span class="inlinecode">domapi.addEvent()</span></p><h5>Example:</h5><pre class="code">
domapi.addEvent(window,"resize", myResizeFunction, true);

function myResizeFunction(){
  alert('Browser was resized!');
  alert('New width='+bodyWidth());
};

domapi.removeEvent(window,"resize", myResizeFunction);</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">target</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Element the event is attached to &nbsp; </td></tr><tr><td class="nm">type</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Type of the event, minus the "on" prefix. Examples: "mouseup", "resize", "click", etc.... &nbsp; </td></tr><tr><td class="nm">fn</td><td>Function</td><td class="opt">Y</td><td>&nbsp;</td><td> The handler to remove &nbsp; </td></tr><tr><td class="nm">useCapture</td><td>boolean</td><td class="opt">&nbsp;</td><td>false&nbsp;</td><td> Only used if the browser is Mozilla based. Cooresponds to the useCapture option of the DOM addEventListener() method. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#661">addEvent</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1116">scrollBarWidth ()</a></th><td>type : integer</td></tr></table><p> Returns the width that the browser allocates for scrollbars. </p><h5>Example:</h5><pre class="code">
var sbw = domapi.scrollBarWidth();
alert(sbw);</pre></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1092">scrollLeft ()</a></th><td>type : integer</td></tr></table><p> Returns how far left the page has been scrolled in pixels. Starts out as zero. Should never return a negative number. </p><h5>Example:</h5><pre class="code">
elm1.setX(domapi.scrollLeft() - 100);</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#686">scrollTop</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="686">scrollTop ()</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns how far down the page has been scrolled in pixels. Starts out as zero. Should never return a negative number. </p><h5>Example:</h5><pre class="code">
elm1.setY(domapi.scrollTop() - 100);</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1092">scrollLeft</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="885">textHeight ( value, font )</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns the height in pixels that the given text would take in the font provided. Font should be in CCS notation, and will default to the body's font if not provided. </p><h5>Example:</h5><pre class="code">
var h = domapi.textHeight("test string", "8pt sans-serif");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">font</td><td>String</td><td class="opt">&nbsp;</td><td>body font&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#884">textWidth</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="884">textWidth ( value, font )</a></th><td>type : integer</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Returns the width in pixels that the given text would take in the font provided. Font should be in CCS notation, and will default to the body's font if not provided. </p><h5>Example:</h5><pre class="code">
var w = domapi.textWidth("test string", "8pt sans-serif");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr><tr><td class="nm">font</td><td>String</td><td class="opt">&nbsp;</td><td>body font&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#885">textHeight</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="992">transferElm ( element, target )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("coreutil");</span> before can be used!</p><p> Removes a element from the document and inserts it into the target element at the end. </p><h5>Example:</h5><pre class="code">
domapi.transferElm(elm1, elm2); // move elm1 into elm2</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">element</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> element to move &nbsp; </td></tr><tr><td class="nm">target</td><td>HTMLElement</td><td class="opt">Y</td><td>&nbsp;</td><td> Element to receive the moved element &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#682">insertElm</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1083">unRegHook ( name, fn )</a></th></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("elm");</span> before can be used!</p><p> Removes a hook previously created with <a href="../bin/obj_13.htm#872">regHook</a>. You must pass the same <span class="inlinecode">name</span> and <span class="inlinecode">fn</span> used in regHook(). </p><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">name</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> Name of the Elm method to remove the hook for. &nbsp; </td></tr><tr><td class="nm">fn</td><td>Function</td><td class="opt">Y</td><td>&nbsp;</td><td> Event handler to remove from the hooked method. &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#872">regHook</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1082">useElmHooks</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="668">unitLoaded ( value )</a></th><td>type : boolean</td></tr></table><p> Returns <span class="inlinecode">false</span> if the named unit has not been included on the page. If it has, it returns the path to it.<br /> If you simply need to know if it was included and don't need the path, use <span class="inlinecode">domAPILibs.indexOf(name)</span> instead as it has better performance. </p><h5>Example:</h5><pre class="code">
var bool = domapi.unitLoaded("tree");
if(!bool)alert("Tree unit was not loaded");</pre><h5>Parameters:</h5><table cellpadding="2" cellspacing="0" border="0" class="paramTable"><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr><tr><td class="nm">value</td><td>String</td><td class="opt">Y</td><td>&nbsp;</td><td> &nbsp; &nbsp; </td></tr></table><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#665">loadUnit</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1078">unload ()</a></th></tr></table><p> This method is used to free up all memory used by DomAPI when the page unloads. This will automatically be called when you page unloads, unless you've written your own <span class="inlinecode">onunload </span>event. If you do, remember to call <span class="inlinecode">domapi.unload() </span>within it. </p></div><a href="#contents">back to top</a><div class="prop_group_title">Properties</div><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1059">browser</a></th><td>type : integer</td></tr></table><p> Integer constant of user's browser type. Possible values are: <pre class="code">btUnknown
btOpera
btIExplore
btSafari
btChimera
btKonqueror
btNetscape
btMozilla</pre> Value is readonly. </p><h5>Example:</h5><pre class="code">
if(domapi.browser == btSafari){
  // do safari specific tasks
}</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1058">platform</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1060">major</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1061">minor</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="252">compressed</a></th><td>type : boolean</td></tr></table><p> Determines whether or not <span class="inlinecode">loadUnit()</span> uses compressed versions of files or not.<br /> Change this setting <b>before</b> calling <span class="inlinecode">loadUnit()</span><br /><br /> This property is determined by what domapi.js file you loaded. For instance, if you used domapi_c.js, then compressed is true. <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1056">imagePath</a></th><td>type : String</td></tr></table><p> Relative path from domapi.js to the DomAPI images folder. <br /><br />Value is readonly. </p><h5>Example:</h5><pre class="code">
document.getElementById("img1").src = domapi.imagePath + "print.gif";</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#239">libPath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1057">themePath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="999">isGecko</a></th><td>type : boolean</td></tr></table><p> True if browser is gecko based (Netscape, Mozilla, Chimera, etc...). <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="242">isIE</a></th><td>type : boolean</td></tr></table><p> True if browser is Internet Explorer. <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1001">isIE5Mac</a></th><td>type : boolean</td></tr></table><p> Browser is a Internet Explorer 5 on Macintosh.<br /><br /> Shorthand for (<span class="inlinecode">domapi.isIEMac && domapi.major == 5</span>) <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="248">isIEMac</a></th><td>type : boolean</td></tr></table><p> Browser is a Internet Explorer on Macintosh.<br /><br /> Shorthand for (<span class="inlinecode">domapi.platform == ptMacintosh && domapi.isIE</span>) <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1000">isKHTML</a></th><td>type : boolean</td></tr></table><p> True if browser is Konqueror or Safari based. <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="249">isNS</a></th><td>type : boolean</td></tr></table><p> True if browser is Mozilla based.<br /><br /> This property is deprecated, use <span class="inlinecode">domapi.isGecko</span> instead. <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="250">isStrict</a></th><td>type : boolean</td></tr></table><p> Document being viewed is using a strict DTD, example:<br /><span class=inlinecode>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span><br /><br /> DomAPI needs to make adjustments to the way elms are handled in order to ensure your pages look the same in both transitional and strict mode. Transistional is sometimes called "quirks mode". <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="239">libPath</a></th><td>type : String</td></tr></table><p> This was the path that was provided in the <span class="inlinecode">domapi_c.js</span> script tag. It is very useful for relative path to graphics.<br /> Most components that use default graphics, will use this path. See also <a href="../bin/obj_13.htm#1056">imagePath</a> and <a href="../bin/obj_13.htm#1057">themePath</a>. <br /><br />Value is readonly. </p><h5>Example:</h5><pre class="code">
document.getElementById("img1").src = domapi.libPath + "images/print.gif";</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1056">imagePath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1057">themePath</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1076">loaded</a></th><td>type : boolean</td></tr></table><p> This property indicates the status of the library as it it loading. If will be <span class="inlinecode">false</span> right up until the Window's <span class="inlinecode">onload</span> event fires. After that its always <span class="inlinecode">true</span>. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1060">major</a></th><td>type : integer</td></tr></table><p> Major version number of user's browser. For instance if browser is IE5.2, major is 5. <br /><br />Value is readonly. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1058">platform</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1059">browser</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1061">minor</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1061">minor</a></th><td>type : integer</td></tr></table><p> Minor version number of user's browser. For instance if browser is IE5.2, minor is 2. <br /><br />Value is readonly. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1058">platform</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1059">browser</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1060">major</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="251">needsBoxFix</a></th><td>type : boolean</td></tr></table><p> Browser does not render CSS box attributes according to W3C specification. Internally, <span class=inlinecode>domapi_c.js</span> makes corrections to ensure proper rendering. <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1058">platform</a></th><td>type : integer</td></tr></table><p> Contains the user's platform as an integer constant. Possible values are: <pre class="code">ptUnknown
ptWindows
ptMacintosh
ptLinux
ptUnix</pre> Value is readonly. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#1059">browser</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1060">major</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1061">minor</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="334">theme</a></th><td>type : Theme</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("theme");</span> before can be used!</p><p> Pointer to the Theme currently in use. the default Theme is "system". Additional Themes can be loaded by using <span class="inlinecode">domapi.loadTheme()</span> and their <span class="inlinecode">apply()</span> methods. </p><h5>Example:</h5><pre class="code">
var b = domapi.theme.border.width;</pre><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#335">themes</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1057">themePath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1077">loadTheme</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1057">themePath</a></th><td>type : String</td></tr></table><p> Relative path from domapi.js to the DomAPI themes folder. Used by the skinning engine for locating images. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#334">theme</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#335">themes</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1077">loadTheme</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="335">themes</a></th><td>type : Array</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("theme");</span> before can be used!</p><p> Collection of all themes available. There will be at least one in here representing the default Theme which is stored in the <span class="inlinecode">theme</span> property. More are added by using <span class="inlinecode">domapi.loadTheme()</span> and then calling their <span class="inlinecode">apply()</span> methods. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#334">theme</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1057">themePath</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1077">loadTheme</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="1082">useElmHooks</a></th><td>type : boolean</td><td>default value : false</td></tr></table><p class="requiredFile">Requires <span class="inlinecode">core.loadUnit("elm");</span> before can be used!</p><p> Toggles the use of Elm "hooks" which are essentially user-defined event handlers. Hooks are turned off by default. </p><table cellpadding="0" cellspacing="0" border="0"><tr><td>See also:&nbsp;</td><td><a href="obj.htm?obj_id=13#872">regHook</a></td></tr><tr><td>&nbsp;</td><td><a href="obj.htm?obj_id=13#1083">unRegHook</a></td></tr></table></div><a href="#contents">back to top</a><div class="prop_block"><table class="prop_table" border="0" cellpadding="0" cellspacing="0"><tr><th><a name="240">version</a></th><td>type : String</td></tr></table><p> Version number of DomAPI build. <br /><br />Value is readonly. </p></div><a href="#contents">back to top</a><hr />  </body></html>
